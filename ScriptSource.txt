import System;
import LOSAutomation;
import Services;
import System.Windows.Forms;

class MacroClass{
  var los : MacroListener;
  var ev : MacroEventData;
  function MacroClass(paramLOS : MacroListener, paramEventData : MacroEventData) {
    los = paramLOS;
    ev = paramEventData;

  if (ev.MacroEventCode==1) RunOnCustomScreenButtonClickMacros();
  if (ev.MacroEventCode==2) RunOnCustomScreenWebLinkClickMacros();
  if (ev.MacroEventCode==4) RunOnFieldChangingMacros();
  if (ev.MacroEventCode==8) RunOnFieldChangedMacros();
  if (ev.MacroEventCode==16) RunOnFileCreatedMacros();
  if (ev.MacroEventCode==32) RunOnFileOpenedMacros();
  if (ev.MacroEventCode==64) RunOnFileClosingMacros();
  if (ev.MacroEventCode==128) RunOnInterfaceLaunchMacros();
  if (ev.MacroEventCode==256) RunOnLoanProgramChangingMacros();
  if (ev.MacroEventCode==512) RunOnLoanProgramChangedMacros();
  if (ev.MacroEventCode==1024) RunOnPrintingOrPreviewingMacros();
  if (ev.MacroEventCode==2048) RunOnScreenChangingMacros();
  if (ev.MacroEventCode==4096) RunOnScreenChangedMacros();
  if (ev.MacroEventCode==8192) RunOnFileSavingMacros();
  if (ev.MacroEventCode==16384) RunOnStatusChangingMacros();
  if (ev.MacroEventCode==32768) RunOnStatusChangedMacros();
  if (ev.MacroEventCode==65536) RunOnBarcodePrintingMacros();
  if (ev.MacroEventCode==131072) RunOnFileOpeningMacros();
  if (ev.MacroEventCode==262144) RunOnPPECustomFieldImportMacros();
  if (ev.MacroEventCode==524288) RunOnGetGinnieNetRecordMacros();
  if (ev.MacroEventCode==1048576) RunOnRecordAddedMacros();
  if (ev.MacroEventCode==2097152) RunOnRecordDeletingMacros();
  if (ev.MacroEventCode==4194304) RunOnInterfaceSubmitMacros();
  if (ev.MacroEventCode==8388608) RunOnFileCopiedMacros();

  }

function RunOnCustomScreenButtonClickMacros() {
var adminFlag : boolean = false;
}

function RunOnCustomScreenWebLinkClickMacros() {
var adminFlag : boolean = false;
}

function RunOnFieldChangingMacros() {
var adminFlag : boolean = false;
 // HMDA0013b:  Must enter Street Address when TBD unchecked
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro16") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro16");
      RunMacro16()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'HMDA0013b:  Must enter Street Address when TBD unchecked'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro16");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // Fair Lending 03: Pricing Variance Approved and needs to be applied - Email
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro39") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro39");
      RunMacro39()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'Fair Lending 03: Pricing Variance Approved and needs to be applied - Email'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro39");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // QualAppAPP04 TBD Prevent Change to Street Address When TBD Is True
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro67") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro67");
      RunMacro67()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'QualAppAPP04 TBD Prevent Change to Street Address When TBD Is True'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro67");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID12:  Intent to Proceed Macro
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro93") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro93");
      RunMacro93()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID12:  Intent to Proceed Macro'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro93");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW010-LQI Clear must have all findings Acceptable or Acceptable as Cured
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro179") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = false;
      MacroRecursionPreventer.AddMacroByName("RunMacro179");
      RunMacro179()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW010-LQI Clear must have all findings Acceptable or Acceptable as Cured'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro179");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnFieldChangedMacros() {
var adminFlag : boolean = false;
 // 2018 HMDA Calc Best Practice revised
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro0") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro0");
      RunMacro0()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018 HMDA Calc Best Practice revised'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro0");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // HMDA0013a:  TBD Set, SubPropStreet add TBD
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro15") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro15");
      RunMacro15()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'HMDA0013a:  TBD Set, SubPropStreet add TBD'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro15");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS001c:  Set Loan be included in NMLS, Retail, Brokered Out & WH
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro25") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro25");
      RunMacro25()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS001c:  Set Loan be included in NMLS, Retail, Brokered Out & WH'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro25");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS009:  Set NMLS Loan Purpose
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro34") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro34");
      RunMacro34()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS009:  Set NMLS Loan Purpose'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro34");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS010:  Set "Is Chattel Loan" to true
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro35") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro35");
      RunMacro35()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS010:  Set Is Chattel Loan to true'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro35");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // Lender Credit Header:  Set Lump Sum Lender $ Credit if Total Lender Credit is greater than 0
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro36") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro36");
      RunMacro36()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'Lender Credit Header:  Set Lump Sum Lender $ Credit if Total Lender Credit is greater than 0'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro36");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // Fair Lending 01: Set Lender Credit on CD pg 2 from Fee Waiver Screen
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro37") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro37");
      RunMacro37()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'Fair Lending 01: Set Lender Credit on CD pg 2 from Fee Waiver Screen'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro37");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // Fair Lending 02: LenderCreditCC10
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro38") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro38");
      RunMacro38()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'Fair Lending 02: LenderCreditCC10'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro38");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor02::Set flag when INTEREST RATE changes
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro41") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro41");
      RunMacro41()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor02::Set flag when INTEREST RATE changes'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro41");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor03::Set flag when LOAN AMOUNT falls out of bucket
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro42") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro42");
      RunMacro42()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor03::Set flag when LOAN AMOUNT falls out of bucket'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro42");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor04::Set flag when LOCKED LOAN AMT changes 10%
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro43") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro43");
      RunMacro43()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor04::Set flag when LOCKED LOAN AMT changes 10%'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro43");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor08::Set flag when PROPERTY TYPE changes
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro47") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro47");
      RunMacro47()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor08::Set flag when PROPERTY TYPE changes'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro47");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor09::Set flag when # of UNITS changes
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro48") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro48");
      RunMacro48()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor09::Set flag when # of UNITS changes'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro48");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor11::Set flag when OCCUPANCY changes
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro50") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro50");
      RunMacro50()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor11::Set flag when OCCUPANCY changes'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro50");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor13::Set flag when PROPERTY ADDRESS changes
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro52") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro52");
      RunMacro52()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor13::Set flag when PROPERTY ADDRESS changes'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro52");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor14::Set flag when ESCROW ELECTION changes
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro53") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro53");
      RunMacro53()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor14::Set flag when ESCROW ELECTION changes'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro53");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor15::Capture the OriginalLockedLoanAmountb
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro54") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro54");
      RunMacro54()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor15::Capture the OriginalLockedLoanAmountb'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro54");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor 17 : Change in Underwriting Approval Method
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro57") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro57");
      RunMacro57()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor 17 : Change in Underwriting Approval Method'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro57");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LE01 Add 3 Business days to Application Date
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro75") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro75");
      RunMacro75()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LE01 Add 3 Business days to Application Date'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro75");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD001::Set Originator Type
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro97") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro97");
      RunMacro97()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD001::Set Originator Type'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro97");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD003::Set Attachment type for PUD's to "detached" unless selected otherwise.
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro99") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro99");
      RunMacro99()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD003::Set Attachment type for PUD's to detached unless selected otherwise.'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro99");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD011::Set MI Company Type
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro107") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro107");
      RunMacro107()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD011::Set MI Company Type'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro107");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFI001::Freddie IFI - Mortgage is sold with recourse
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro137") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro137");
      RunMacro137()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFI001::Freddie IFI - Mortgage is sold with recourse'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro137");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFI019::Freddie IFI - Mortgage with lender paid mortgage insurance
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro138") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro138");
      RunMacro138()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFI019::Freddie IFI - Mortgage with lender paid mortgage insurance'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro138");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFI033::Freddie IFI - Mortgage is sold with indemnification
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro139") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro139");
      RunMacro139()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFI033::Freddie IFI - Mortgage is sold with indemnification'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro139");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFI532::Freddie IFI - Home Possible Mortgage satisfies the minimum number of payment references
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro142") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro142");
      RunMacro142()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFI532::Freddie IFI - Home Possible Mortgage satisfies the minimum number of payment references'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro142");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFI630::Freddie IFI - Mortgage secured by properties with resale restrictions that terminate
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro144") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro144");
      RunMacro144()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFI630::Freddie IFI - Mortgage secured by properties with resale restrictions that terminate'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro144");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFI631::Freddie IFI - Mortgage secured by properties with resale restrictions that survive forec
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro145") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro145");
      RunMacro145()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFI631::Freddie IFI - Mortgage secured by properties with resale restrictions that survive forec'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro145");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFI921::Freddie IFI - Mortgage where borrower used a credit card, cash advance or unsecured line
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro146") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro146");
      RunMacro146()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFI921::Freddie IFI - Mortgage where borrower used a credit card, cash advance or unsecured line'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro146");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFID25::Freddie IFI - A mortgage using Employer Assisted Homeownership
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro147") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro147");
      RunMacro147()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFID25::Freddie IFI - A mortgage using Employer Assisted Homeownership'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro147");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFIG18::Freddie IFI - HomePossible Mortgage with Affordable Second entered in LP in the "Total
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro149") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro149");
      RunMacro149()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFIG18::Freddie IFI - HomePossible Mortgage with Affordable Second entered in LP in the Total'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro149");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFIH03::Freddie IFI - Home Value Explorer (HVE) point value estimate used to determine value
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro150") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro150");
      RunMacro150()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFIH03::Freddie IFI - Home Value Explorer (HVE) point value estimate used to determine value'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro150");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFIH31::Freddie IFI - A mortgage when the borrower uses assets as a basis for mortgage qualifica
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro152") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro152");
      RunMacro152()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFIH31::Freddie IFI - A mortgage when the borrower uses assets as a basis for mortgage qualifica'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro152");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDIFI241::Freddie IFI - Home Possible Mortgage
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro153") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro153");
      RunMacro153()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDIFI241::Freddie IFI - Home Possible Mortgage'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro153");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // UCD001: Set Assumption for CD
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro154") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro154");
      RunMacro154()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'UCD001: Set Assumption for CD'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro154");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // UCD002:  Set Liability After Foreclosure on CD page 4
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro155") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro155");
      RunMacro155()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'UCD002:  Set Liability After Foreclosure on CD page 4'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro155");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // UCD004: Set Escrow Waiver Reason on CD page 4
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro157") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro157");
      RunMacro157()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'UCD004: Set Escrow Waiver Reason on CD page 4'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro157");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFORIG002: Set Doc Type to Full for All Conv and FHA Loans
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro164") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = false;
      MacroRecursionPreventer.AddMacroByName("RunMacro164");
      RunMacro164()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFORIG002: Set Doc Type to Full for All Conv and FHA Loans'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro164");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW005:  Copy AUS Findings to 1008
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro175") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro175");
      RunMacro175()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW005:  Copy AUS Findings to 1008'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro175");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // Set Fee Expriation Date
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro194") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro194");
      RunMacro194()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'Set Fee Expriation Date'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro194");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // Application Date Set
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro195") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro195");
      RunMacro195()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'Application Date Set'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro195");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockDeskUser
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro204") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro204");
      RunMacro204()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockDeskUser'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro204");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnFileCreatedMacros() {
var adminFlag : boolean = false;
 // 2018HMDA00:  Set HMDA to exclude at File Creation
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro1") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro1");
      RunMacro1()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA00:  Set HMDA to exclude at File Creation'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro1");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID03: Partial Payments
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro83") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro83");
      RunMacro83()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID03: Partial Payments'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro83");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // UCD003: Partial Payments
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro156") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro156");
      RunMacro156()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'UCD003: Partial Payments'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro156");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFORIG003: Set Fee Simple if EstHeld is blank
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro165") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = false;
      MacroRecursionPreventer.AddMacroByName("RunMacro165");
      RunMacro165()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFORIG003: Set Fee Simple if EstHeld is blank'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro165");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // Set LO Comp Value
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro196") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro196");
      RunMacro196()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'Set LO Comp Value'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro196");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 56- Create 3 Conditions on File Creation
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro197") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = false;
      MacroRecursionPreventer.AddMacroByName("RunMacro197");
      RunMacro197()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '56- Create 3 Conditions on File Creation'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro197");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnFileOpenedMacros() {
var adminFlag : boolean = false;
 // 2018HMDA00a:  Set HMDA to Exclude
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro2") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro2");
      RunMacro2()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA00a:  Set HMDA to Exclude'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro2");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS001:  Set Loan to Exclude from NMLS
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro22") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro22");
      RunMacro22()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS001:  Set Loan to Exclude from NMLS'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro22");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // CD02a:  Calculate 3 Business Days from CD Redisclosure Requred Flag
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro74") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro74");
      RunMacro74()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'CD02a:  Calculate 3 Business Days from CD Redisclosure Requred Flag'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro74");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LE03a:  Calculate 3 Business Dates from LE Redisclosure Test Result Date
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro80") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro80");
      RunMacro80()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LE03a:  Calculate 3 Business Dates from LE Redisclosure Test Result Date'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro80");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnFileClosingMacros() {
var adminFlag : boolean = false;
}

function RunOnInterfaceLaunchMacros() {
var adminFlag : boolean = false;
 // TRID11: QM Failed, Cancel Docutech Interface Launch
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro92") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro92");
      RunMacro92()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID11: QM Failed, Cancel Docutech Interface Launch'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro92");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFLP001-Prevent Credit Pull Until Authorized
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro167") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro167");
      RunMacro167()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFLP001-Prevent Credit Pull Until Authorized'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro167");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnLoanProgramChangingMacros() {
var adminFlag : boolean = false;
}

function RunOnLoanProgramChangedMacros() {
var adminFlag : boolean = false;
 // LockMonitor01::Set flag when LOAN PROGRAM changes
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro40") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro40");
      RunMacro40()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor01::Set flag when LOAN PROGRAM changes'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro40");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor16::Set Exclude From Lock Monitor flag
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro56") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro56");
      RunMacro56()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor16::Set Exclude From Lock Monitor flag'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro56");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID10: Set Interim Interest Days Per Year on Mortgage Type
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro91") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro91");
      RunMacro91()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID10: Set Interim Interest Days Per Year on Mortgage Type'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro91");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnPrintingOrPreviewingMacros() {
var adminFlag : boolean = false;
}

function RunOnScreenChangingMacros() {
var adminFlag : boolean = false;
 // 2018HMDA00b:: Exclude Sample loans
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro3") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro3");
      RunMacro3()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA00b:: Exclude Sample loans'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro3");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor05::Set flag when LTV falls out of bucket
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro44") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro44");
      RunMacro44()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor05::Set flag when LTV falls out of bucket'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro44");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor06::Set flag when CLTV falls out of bucket
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro45") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro45");
      RunMacro45()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor06::Set flag when CLTV falls out of bucket'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro45");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor07::Set flag when DEBT RATIO falls out of buckets
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro46") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro46");
      RunMacro46()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor07::Set flag when DEBT RATIO falls out of buckets'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro46");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor12::Set flag when FICO falls out of bucket
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro51") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro51");
      RunMacro51()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor12::Set flag when FICO falls out of bucket'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro51");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LockMonitor99::RESET lock validation flag
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro58") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro58");
      RunMacro58()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LockMonitor99::RESET lock validation flag'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro58");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LE01a: Add 3 Business days to Application Date
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro76") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro76");
      RunMacro76()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LE01a: Add 3 Business days to Application Date'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro76");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID05a: Late Charge by State (AL, KS, MS, NC, SC, WV)
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro86") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro86");
      RunMacro86()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID05a: Late Charge by State (AL, KS, MS, NC, SC, WV)'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro86");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID07 Unreconciled Fee Increases
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro88") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro88");
      RunMacro88()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID07 Unreconciled Fee Increases'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro88");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFLP002-Set Submitted Date when Needed Item is assigned to Document
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro168") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro168");
      RunMacro168()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFLP002-Set Submitted Date when Needed Item is assigned to Document'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro168");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // Net Buy - Set Discount
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro193") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro193");
      RunMacro193()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'Net Buy - Set Discount'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro193");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnScreenChangedMacros() {
var adminFlag : boolean = false;
 // NMLS006: Set Prepay
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro31") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro31");
      RunMacro31()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS006: Set Prepay'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro31");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // CD01a: Set Date when CD Redisclsure Required
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro72") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro72");
      RunMacro72()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'CD01a: Set Date when CD Redisclsure Required'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro72");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // CD02:  Calculate 3 busines days from CD Redisclosure Flag
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro73") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro73");
      RunMacro73()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'CD02:  Calculate 3 busines days from CD Redisclosure Flag'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro73");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LE02a:  Set LE Redisclosure Date based off TRID LE Disc Test at Screen Changed
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro78") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro78");
      RunMacro78()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LE02a:  Set LE Redisclosure Date based off TRID LE Disc Test at Screen Changed'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro78");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LE03:  Calculate 3 business days from LE Redisclosure Flag date
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro79") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro79");
      RunMacro79()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LE03:  Calculate 3 business days from LE Redisclosure Flag date'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro79");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID01:  Set Assumability on CD--REVISED 10.1.18
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro81") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro81");
      RunMacro81()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID01:  Set Assumability on CD--REVISED 10.1.18'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro81");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID02:  Set Liability in Foreclosure on CD page 1
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro82") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro82");
      RunMacro82()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID02:  Set Liability in Foreclosure on CD page 1'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro82");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID04 REVISED: Set Escrow Waiver Reason on CD page 4
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro84") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro84");
      RunMacro84()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID04 REVISED: Set Escrow Waiver Reason on CD page 4'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro84");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID05: Set Late Charge
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro85") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro85");
      RunMacro85()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID05: Set Late Charge'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro85");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID06:  Set Prepayment value
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro87") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro87");
      RunMacro87()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID06:  Set Prepayment value'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro87");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // UCD005: Set Late Payment
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro158") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro158");
      RunMacro158()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'UCD005: Set Late Payment'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro158");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // UCD006 Late Charge by State (AL, KS, MS, NC, SC, WV)
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro159") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro159");
      RunMacro159()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'UCD006 Late Charge by State (AL, KS, MS, NC, SC, WV)'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro159");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // UCD007:  Set Prepayment value
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro160") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro160");
      RunMacro160()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'UCD007:  Set Prepayment value'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro160");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW001:  Set 1008 Contact Information
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro171") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro171");
      RunMacro171()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW001:  Set 1008 Contact Information'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro171");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW002:  Copy RepCreditScore to 1008
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro172") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro172");
      RunMacro172()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW002:  Copy RepCreditScore to 1008'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro172");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnFileSavingMacros() {
var adminFlag : boolean = false;
}

function RunOnStatusChangingMacros() {
var adminFlag : boolean = false;
 // 2018HMDA04a::Set Application Date for Retail
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro4") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro4");
      RunMacro4()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA04a::Set Application Date for Retail'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro4");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDAAction11:  Originated
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro6") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro6");
      RunMacro6()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDAAction11:  Originated'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro6");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDAAction11a:  Approved Not Accepted
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro7") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro7");
      RunMacro7()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDAAction11a:  Approved Not Accepted'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro7");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDAActionTaken11b:  Application Denied
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro8") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro8");
      RunMacro8()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDAActionTaken11b:  Application Denied'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro8");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDAActionTaken11c:  Application Withdrawn By Applicant
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro9") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro9");
      RunMacro9()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDAActionTaken11c:  Application Withdrawn By Applicant'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro9");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDAActionTaken11d: File Closed for Incompleteness
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro10") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro10");
      RunMacro10()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDAActionTaken11d: File Closed for Incompleteness'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro10");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDAActionTaken11e: Loan Purchased by your Institution
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro11") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro11");
      RunMacro11()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDAActionTaken11e: Loan Purchased by your Institution'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro11");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDAActionTaken11f: Preapproval Request Denied by Financial Institution
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro12") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro12");
      RunMacro12()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDAActionTaken11f: Preapproval Request Denied by Financial Institution'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro12");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDAActionTaken11g: Preapproval Request Approved But Not Accepted
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro13") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro13");
      RunMacro13()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDAActionTaken11g: Preapproval Request Approved But Not Accepted'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro13");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDA17a: County Code NA
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro17") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro17");
      RunMacro17()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA17a: County Code NA'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro17");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDA110:  Business or Commerical Purpose
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro20") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro20");
      RunMacro20()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA110:  Business or Commerical Purpose'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro20");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDA:  Set HMDA Denial Reason
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro21") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro21");
      RunMacro21()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA:  Set HMDA Denial Reason'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro21");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // QualAppAPP07 revised
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro69") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro69");
      RunMacro69()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'QualAppAPP07 revised'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro69");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFORIG004-Residence history is less than 2 years
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro166") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = false;
      MacroRecursionPreventer.AddMacroByName("RunMacro166");
      RunMacro166()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFORIG004-Residence history is less than 2 years'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro166");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW008- Prevent Clear To Close if Documents not reviewed
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro177") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro177");
      RunMacro177()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW008- Prevent Clear To Close if Documents not reviewed'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro177");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFDOCS001: Cannot move to Docs Sent if CD not disclosed
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro187") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro187");
      RunMacro187()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFDOCS001: Cannot move to Docs Sent if CD not disclosed'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro187");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnStatusChangedMacros() {
var adminFlag : boolean = false;
 // 2018HMDA12:  Set HMDA Action Date
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro14") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro14");
      RunMacro14()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA12:  Set HMDA Action Date'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro14");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // 2018HMDA95: MLO NMLS Identifier NA
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro19") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro19");
      RunMacro19()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro '2018HMDA95: MLO NMLS Identifier NA'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro19");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS001b:  Status to Include Loans in NMLS for Retail, Brokered Out and WH
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro24") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro24");
      RunMacro24()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS001b:  Status to Include Loans in NMLS for Retail, Brokered Out and WH'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro24");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS001d:  Lead Status to be Excluded from NMLS for Retail, Brokered Out and WH
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro26") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro26");
      RunMacro26()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS001d:  Lead Status to be Excluded from NMLS for Retail, Brokered Out and WH'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro26");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS005: Set NMLSInvestorTypeOV
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro30") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro30");
      RunMacro30()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS005: Set NMLSInvestorTypeOV'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro30");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS007: Loan is Jumbo
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro32") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro32");
      RunMacro32()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS007: Loan is Jumbo'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro32");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // NMLS008:  Set Property Type
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro33") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro33");
      RunMacro33()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'NMLS008:  Set Property Type'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro33");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // CD01: Set Date Stamp when CD Redisclosure Required flagged
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro71") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro71");
      RunMacro71()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'CD01: Set Date Stamp when CD Redisclosure Required flagged'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro71");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // LE02: Set LE Redisclosure Date based off TRID LE Light change
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro77") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro77");
      RunMacro77()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'LE02: Set LE Redisclosure Date based off TRID LE Light change'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro77");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // TRID09 QM Safe Harbor Fail will not allow Clear to Close
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro90") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro90");
      RunMacro90()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID09 QM Safe Harbor Fail will not allow Clear to Close'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro90");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD002::Set Lender for Retail/Wholesale loans
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro98") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro98");
      RunMacro98()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD002::Set Lender for Retail/Wholesale loans'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro98");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD004::Set SpecialFloodHazardArea
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro100") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro100");
      RunMacro100()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD004::Set SpecialFloodHazardArea'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro100");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD005::Set Non-Traditional Credit Used if no FICO values (up to 8 borrowers)
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro101") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro101");
      RunMacro101()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD005::Set Non-Traditional Credit Used if no FICO values (up to 8 borrowers)'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro101");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD006::Set FirstTimeHomeBuyer and GSELoanProgramIdentifier
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro102") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro102");
      RunMacro102()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD006::Set FirstTimeHomeBuyer and GSELoanProgramIdentifier'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro102");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD007::Default Buydown Contributor
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro103") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro103");
      RunMacro103()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD007::Default Buydown Contributor'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro103");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD010::Set MI Absence Reason to #5 if no MI
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro106") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro106");
      RunMacro106()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD010::Set MI Absence Reason to #5 if no MI'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro106");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD012::Set Second Mortgage Type (Concurrent/Resubordinated)
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro108") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro108");
      RunMacro108()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD012::Set Second Mortgage Type (Concurrent/Resubordinated)'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro108");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDD015::Set Investor remittance to Scheduled Interest/Scheduled Principal
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro111") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro111");
      RunMacro111()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDD015::Set Investor remittance to Scheduled Interest/Scheduled Principal'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro111");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC019::Lender-purchased mortgage insurance
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro121") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro121");
      RunMacro121()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC019::Lender-purchased mortgage insurance'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro121");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC127::Desktop Underwriter Loan
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro123") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro123");
      RunMacro123()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC127::Desktop Underwriter Loan'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro123");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC150::Multiple (5-10) Financed Properties to the Same Buyer
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro125") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro125");
      RunMacro125()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC150::Multiple (5-10) Financed Properties to the Same Buyer'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro125");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC168::Inter Vivos Revocable Trust
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro126") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro126");
      RunMacro126()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC168::Inter Vivos Revocable Trust'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro126");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC170::Flood Insurance Special Flood Hazard Area
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro127") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro127");
      RunMacro127()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC170::Flood Insurance Special Flood Hazard Area'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro127");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC175::Flood Insurance Not a Special Flood Hazard Area
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro128") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro128");
      RunMacro128()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC175::Flood Insurance Not a Special Flood Hazard Area'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro128");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC180::No Flood Insurance Not a Special Flood Hazard Area
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro129") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro129");
      RunMacro129()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC180::No Flood Insurance Not a Special Flood Hazard Area'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro129");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC281::Financed MI
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro133") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro133");
      RunMacro133()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC281::Financed MI'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro133");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // ULDDSFC588::Detached Condominium
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro135") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro135");
      RunMacro135()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'ULDDSFC588::Detached Condominium'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro135");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW003:  Default Seller Loan Number on 1008
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro173") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro173");
      RunMacro173()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW003:  Default Seller Loan Number on 1008'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro173");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW004:  Set 1008 Mortgage Originator Type
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro174") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro174");
      RunMacro174()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW004:  Set 1008 Mortgage Originator Type'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro174");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW007-  Underwriting Touch Counter_Revised
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro176") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro176");
      RunMacro176()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW007-  Underwriting Touch Counter_Revised'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro176");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFUW016-Preserve Approval Date
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro185") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = false;
      MacroRecursionPreventer.AddMacroByName("RunMacro185");
      RunMacro185()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFUW016-Preserve Approval Date'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro185");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFDOCS002::Set CD Liability after Foreclosure Field
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro188") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro188");
      RunMacro188()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFDOCS002::Set CD Liability after Foreclosure Field'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro188");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFDOCS003::Set CD Partial Payments Field
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro189") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro189");
      RunMacro189()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFDOCS003::Set CD Partial Payments Field'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro189");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // WFDOCS004::Document Expiration, cancel doc prep interface
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro190") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro190");
      RunMacro190()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'WFDOCS004::Document Expiration, cancel doc prep interface'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro190");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // PTD Conditions
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro202") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro202");
      RunMacro202()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'PTD Conditions'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro202");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

 // PTF Conditions
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro203") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = false;
      MacroRecursionPreventer.AddMacroByName("RunMacro203");
      RunMacro203()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'PTF Conditions'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro203");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnBarcodePrintingMacros() {
var adminFlag : boolean = false;
}

function RunOnFileOpeningMacros() {
var adminFlag : boolean = false;
 // TRID08: REVISED Disclosure Countdown - Business Days
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro89") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro89");
      RunMacro89()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID08: REVISED Disclosure Countdown - Business Days'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro89");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnPPECustomFieldImportMacros() {
var adminFlag : boolean = false;
}

function RunOnGetGinnieNetRecordMacros() {
var adminFlag : boolean = false;
}

function RunOnRecordAddedMacros() {
var adminFlag : boolean = false;
}

function RunOnRecordDeletingMacros() {
var adminFlag : boolean = false;
}

function RunOnInterfaceSubmitMacros() {
var adminFlag : boolean = false;
 // TRID14:  Cancel CD Order if last delivered LE date is Today
  if (MacroRecursionPreventer.IsMacroRunning("RunMacro96") == false) {
    try {
      adminFlag = ev.File.EditWithAdminPermissions;
      ev.File.EditWithAdminPermissions = true;
      MacroRecursionPreventer.AddMacroByName("RunMacro96");
      RunMacro96()}
    catch(err) {
      MessageBox.Show("An error has occurred while executing macro 'TRID14:  Cancel CD Order if last delivered LE date is Today'. Contact your system administrator.: \n\n" + err.message, "BytePro Enterprise")
    }
    finally {
      MacroRecursionPreventer.RemoveMacroByName("RunMacro96");
      ev.File.EditWithAdminPermissions = adminFlag;
    };
    if (ev.Cancel==true) return;
  };

}

function RunOnFileCopiedMacros() {
var adminFlag : boolean = false;
}


function RunMacro0() { // 2018 HMDA Calc Best Practice revised
// This macro applies all of the default 2018+ HMDA calculations when
// the status is changed to declined, canceled, funded, or purchased.
// Note that the macro requires the Action Taken and Action Date to be present.

var hmda2018date = new System.DateTime(2018, 1, 1);
var currentStatus = los.GetField("Status.LoanStatus");


if (los.GetField("HMDA.ActionDate") != null || los.GetField("HMDA.ActionTaken") != 0){ 

var stat = false; 
switch(currentStatus){
case 7: // STATUS_DECLINED
case 10: //STATUS_CANCELED
case 14:  //STATUS_FUNDED
case 15: //STATUS_PURCHASED
stat = true; 
}
if (stat == true) {

//   if (los.GetField("HMDA.ActionDate") >= hmda2018date) {


    los.SetField("HMDA.ApplicationDateNA", los.GetField("HMDACalcs.ApplicationDateNA"))
    los.SetField("Loan.HMDALoanPurpose2", los.GetField("HMDACalcs.LoanPurpose2"))
    los.SetField("Secondary.ConstructionMethod", los.GetField("HMDACalcs.ConstructionMethod"))
    los.SetField("SubProp.ManufacturedHomeLandPropertyInterest", los.GetField("HMDACalcs.ManufacturedHomeLandPropertyInterest"))
    los.SetField("SubProp.ManufacturedHomeSecuredPropertyType", los.GetField("HMDACalcs.ManufacturedHomeSecuredPropertyType"))
    los.SetField("HMDA.LoanAmount", los.GetField("HMDACalcs.LoanAmount"))
    los.SetField("HMDA.ApplicantAgeNA", los.GetField("HMDACalcs.ApplicantAgeNA"))
    los.SetField("HMDA.CoApplicantAgeNA", los.GetField("HMDACalcs.CoApplicantAgeNA"))
    los.SetField("HMDA.GrossAnnualIncomeNA", los.GetField("HMDACalcs.GrossAnnualIncomeNA"))
    los.SetField("Loan.HMDATypeOfPurchaser", los.GetField("HMDACalcs.TypeOfPurchaser"))
    los.SetField("Loan.HMDARateSpread", los.GetField("HMDACalcs.RateSpread"))
    los.SetField("Loan.HMDARateSpreadNA", los.GetField("HMDACalcs.RateSpreadNA"))
    los.SetField("Loan.HMDAHOEPAStatus", los.GetField("HMDACalcs.HOEPAStatus"))
    los.SetField("Loan.HMDALienStatus", los.GetField("HMDACalcs.LienStatus"))
    los.SetField("HMDA.ApplicantCreditScore", los.GetField("HMDACalcs.ApplicantCreditScore"))
    los.SetField("HMDA.CoApplicantCreditScore", los.GetField("HMDACalcs.CoApplicantCreditScore"))
    los.SetField("HMDA.ApplicantCreditScoreModel", los.GetField("HMDACalcs.ApplicantCreditScoreModel"))
    los.SetField("HMDA.ApplicantCreditScoreModelOther", los.GetField("HMDACalcs.ApplicantCreditScoreModelOther"))
    los.SetField("HMDA.CoApplicantCreditScoreModel", los.GetField("HMDACalcs.CoApplicantCreditScoreModel"))
    los.SetField("HMDA.CoApplicantCreditScoreModelOther", los.GetField("HMDACalcs.CoApplicantCreditScoreModelOther"))
    los.SetField("Loan.HMDADenialReason1", los.GetField("HMDACalcs.DenialReason1"))
    los.SetField("Loan.HMDADenialReason2", los.GetField("HMDACalcs.DenialReason2"))
    los.SetField("Loan.HMDADenialReason3", los.GetField("HMDACalcs.DenialReason3"))
    los.SetField("Loan.HMDADenialReason4", los.GetField("HMDACalcs.DenialReason4"))
    los.SetField("HMDA.DenialReasonOther", los.GetField("HMDACalcs.DenialReasonOther"))
    los.SetField("HMDA.TotalLoanCosts", los.GetField("HMDACalcs.TotalLoanCosts"))
    los.SetField("HMDA.TotalLoanCostsNA", los.GetField("HMDACalcs.TotalLoanCostsNA"))
    los.SetField("HMDA.TotalPointsAndFees", los.GetField("HMDACalcs.TotalPointsAndFees"))
    los.SetField("HMDA.TotalPointsAndFeesNA", los.GetField("HMDACalcs.TotalPointsAndFeesNA"))
    los.SetField("HMDA.OriginationCharges", los.GetField("HMDACalcs.OriginationCharges"))
    los.SetField("HMDA.OriginationChargesNA", los.GetField("HMDACalcs.OriginationChargesNA"))
    los.SetField("HMDA.DiscountPoints", los.GetField("HMDACalcs.DiscountPoints"))
    los.SetField("HMDA.DiscountPointsNA", los.GetField("HMDACalcs.DiscountPointsNA"))
    los.SetField("HMDA.LenderCredits", los.GetField("HMDACalcs.LenderCredits"))
    los.SetField("HMDA.LenderCreditsNA", los.GetField("HMDACalcs.LenderCreditsNA"))
    los.SetField("HMDA.InterestRate", los.GetField("HMDACalcs.InterestRate"))
    los.SetField("HMDA.InterestRateNA", los.GetField("HMDACalcs.InterestRateNA"))
    los.SetField("HMDA.PrepaymentPenaltyNA", los.GetField("HMDACalcs.PrepaymentPenaltyNA"))
    los.SetField("HMDA.DTIRatio", los.GetField("HMDACalcs.DTIRatio"))
    los.SetField("HMDA.DTIRatioNA", los.GetField("HMDACalcs.DTIRatioNA"))
    los.SetField("HMDA.CLTV", los.GetField("HMDACalcs.CLTV"))
    los.SetField("HMDA.CLTV_NA", los.GetField("HMDACalcs.CLTV_NA"))
    los.SetField("HMDA.Term", los.GetField("HMDACalcs.LoanTerm"))
    los.SetField("HMDA.TermNA", los.GetField("HMDACalcs.LoanTermNA"))
    los.SetField("HMDA.IntroductoryRatePeriod", los.GetField("HMDACalcs.IntroductoryRatePeriod"))
    los.SetField("HMDA.IntroductoryRatePeriodNA", los.GetField("HMDACalcs.IntroductoryRatePeriodNA"))
    los.SetField("HMDA.HasBalloonPayment", los.GetField("HMDACalcs.HasBalloonPayment"))
    los.SetField("HMDA.HasInterestOnlyPayments", los.GetField("HMDACalcs.HasInterestOnlyPayments"))
    los.SetField("HMDA.HasOtherNonAmortizingFeature", los.GetField("HMDACalcs.HasOtherNonAmortizingFeature"))
    los.SetField("HMDA.PropertyValue", los.GetField("HMDACalcs.PropertyValue"))
    los.SetField("HMDA.PropertyValueNA", los.GetField("HMDACalcs.PropertyValueNA"))
    los.SetField("HMDA.AUSSystem1", los.GetField("HMDACalcs.AUSSystem1"))
    los.SetField("HMDA.AUSSystem2", los.GetField("HMDACalcs.AUSSystem2"))
    los.SetField("HMDA.AUSSystem3", los.GetField("HMDACalcs.AUSSystem3"))
    los.SetField("HMDA.AUSSystem4", los.GetField("HMDACalcs.AUSSystem4"))
    los.SetField("HMDA.AUSSystem5", los.GetField("HMDACalcs.AUSSystem5"))
    los.SetField("HMDA.AUSSystemOther", los.GetField("HMDACalcs.AUSSystemOther"))
    los.SetField("HMDA.AUSResult1", los.GetField("HMDACalcs.AUSResult1"))
    los.SetField("HMDA.AUSResult2", los.GetField("HMDACalcs.AUSResult2"))
    los.SetField("HMDA.AUSResult3", los.GetField("HMDACalcs.AUSResult3"))
    los.SetField("HMDA.AUSResult4", los.GetField("HMDACalcs.AUSResult4"))
    los.SetField("HMDA.AUSResult5", los.GetField("HMDACalcs.AUSResult5"))
    los.SetField("HMDA.AUSResultOtherDesc", los.GetField("HMDACalcs.AUSResultOther"))
}


/*else if (los.GetField("HMDA.ActionDate") < hmda2018date) {
   // apply pre-2018 logic here if desired.
  } */
 }
 
//else { los.Application.ShowMessageBox("HMDA Action Taken and Action Date must be completed"); 
//}
//}






}

function RunMacro1() { // 2018HMDA00:  Set HMDA to exclude at File Creation
// At file creation,
// set Exclude from HMDA = Yes 
// Status.FundedDate ,
// Status.CanceledDate
// and Status.DeclinedDate = null

if (los.GetField("Status.FundingDate") == null ||
    los.GetField("Status.CanceledDate") == null ||
    los.GetField("Status.DeclinedDate") == null)
{
  los.SetField("Loan.ExcludeFromHMDA", true);
}



}

function RunMacro2() { // 2018HMDA00a:  Set HMDA to Exclude
// At file creation,
// set Exclude from HMDA = Yes 
// Status.FundedDate ,
// Status.CanceledDate
// Status.DeclinedDate 
// and PurchasedDate = null

try
{
if ((los.GetField("Status.FundingDate") == null) ||
    (los.GetField("Status.CanceledDate") == null) ||
    (los.GetField("Status.DeclinedDate") == null) ||
    (los.GetField("Status.PurchasedDate") == null))
{
  los.SetField("Loan.ExcludeFromHMDA", true);
}
}
catch(err)
{
MessageBox.Show("Macro HMDA006-1:\r\n\r\n" + err);
};


}

function RunMacro3() { // 2018HMDA00b:: Exclude Sample loans
//  When borrower.name includes "Test" or "Sample" set "Exclude from HMDA to TRUE
//
//  NOTE:  Name must begin with either "Sample" or "Test"

if ((los.GetField("Bor1.FullName").match("Sample*") != null) ||
    (los.GetField("Bor1.FullName").match("Test*") != null) ||
    (los.GetField("Bor1.FullName").match("Customer*") != null))
{
  los.SetField("Loan.ExcludeFromHMDA", true)
  los.SetField("Loan.ExcludeFromNMLSCallReport", true);
}

}

function RunMacro4() { // 2018HMDA04a::Set Application Date for Retail
//Data Dictionary: https://www.bytesoftware.com/byteproenterprise/download/900/DataDictionary.html

//Origination Channel Constants
var Retail = 1;

//Application Test Result Constants
var HasSixDataPointsAndAppDateNotSet = 2;

//Get Condition Variables
var OriginationChannel = los.GetField("FileData.OriginationChannel");
var ApplicationTestResult = los.GetField("Status.ApplicationTestResult");

//Check Condition
if(OriginationChannel == Retail &&
    ApplicationTestResult == HasSixDataPointsAndAppDateNotSet)
{
    los.SetField("Status.ApplicationDate", DateTime.Now);
}
}

function RunMacro6() { // 2018HMDAAction11:  Originated
if (los.GetField("Status.LoanStatus")== "14") // funded
{ 
var origCh = false; 
switch(los.GetField("FileData.OriginationChannel"))
{
case 1: // Retail
case 3: // Wholesale
case 5: // Mini-Corr
origCh = true; break;
}
if (origCh !=false && los.GetField("Status.ApplicationDate") !=null)
{
 los.SetField("HMDA.ActionTaken", 1)
los.SetField("Loan.HMDATypeOfPurchaser", 0) 
los.SetField("Loan.ExcludeFromHMDA", false);
  }
}

 
}

function RunMacro7() { // 2018HMDAAction11a:  Approved Not Accepted
// And when FileData.OriginationChannel = Retail, Wholesale or Mini-Corr
// And when the Status.LoanStatus = "10" Canceled
// And when Status.ApprovedDate is not blank
// And when Status.ClearToCloseDate is not blank
// And when Loan_Cancel04 && Loan_Cancel05 are blank
// And when the Status.ClearToCloseDate is on or after the Status.ApprovedDate
// And when there are (0) outstanding PTD conditions in UW Condition table 

// Set the HMDA.ActionTaken to "2" Approved but not Accepted
// Set Loan.ExcludeFromHMDA to false



if (los.GetField("Status.LoanStatus")==10) { // Canceled 
var channel = false; 
switch(los.GetField("FileData.OriginationChannel")){
case 1: // Retail
case 3: //Wholesale
case 5: //Mini-Corr
channel = true; break; 
}

if (channel!= false && los.GetField("Status.ClearToCloseDate")!=null && los.GetField("Status.ApprovedDate")!=null){
var cleartoClose = new Date(los.GetField("Status.ClearToCloseDate"));
var Approved = new Date(los.GetField("Status.ApprovedDate"));
if (cleartoClose.getTime() >= Approved.getTime()) {
if(PendingPTDConditions() == false){
los.SetField("HMDA.ActionTaken", 2); 
los.SetField("Loan.ExcludeFromHMDA", false);
}
else 
if (los.GetField("ExtendedFields.Loan_Cancel04") == "" &&
    los.GetField("ExtendedFields.Loan_Cancel05") == null)
{
los.Application.ShowMessageBox("There are outstanding PTDs, Please complete the NOIA screen prior to cancelling the loan file, then retrigger the status to Canceled or clear conditions and retrigger status"); 
ev.Cancel=true;
}
}
}


function PendingPTDConditions() {
var ConditionCount = ev.File.GetCollectionCount("Condition");
    var PTD_Outstanding = false;
    const PTD = 1;
    for (var a = 1; a <= ConditionCount; a++)
    {
      var Condition : SDKObject = ev.File.GetCollectionObject("Condition", a);
      var ConditionStage = Condition.GetField("ConditionStage");
      var ClearedDate = Condition.GetField("ClearedDate");
      if((ConditionStage == PTD) &&
         (ClearedDate == null))
      {
        PTD_Outstanding = true;
        a = ConditionCount + 1;
      }
}
  return PTD_Outstanding; 
}
}
}

function RunMacro8() { // 2018HMDAActionTaken11b:  Application Denied
//When HMDA.ActionDate => 01/01/2018

//Scenario 1//  When Status.LoanStatus = 7-Denied
// When Status.SubmittedDate "4" != null
// When HMDA.DenialReason1 != null
//OR
// Scenario 2//when Status.ApprovedDate != null
// && there are outstanding PTD conditions
// && ExtendedFields.Loan_Cancel01 == null
// && ExtendedFields.Loan_Cancel07 == null

// Then set HMDA.ActionTaken = "3" / Application Denied by Financial Institution
// set Loan.ExcludeFromHMDA == false




if ((los.GetField("Status.LoanStatus") == 7  && 
los.GetField("Status.SubmittedDate") != null &&
los.GetField("Loan.HMDADenialReason1")!=null
) || (los.GetField("Status.ApprovedDate") !=null && PTDOutstanding() == true && los.GetField("ExtendedFields.Loan_Cancel01") == null && los.GetField("ExtendedFields.Loan_Cancel07") == null)) {
 
 los.SetField("HMDA.ActionTaken", 3);  // Application Denied by Financial Institution
 los.SetField("Loan.ExcludeFromHMDA", false);
}





function PTDOutstanding(){
 
  var PTD_Outstanding = false;
  var Conditions = ev.File.GetCollectionCount("Condition");
  for (var a = 1; a <= Conditions; a++) {

  var obj : SDKObject = ev.File.GetCollectionObject("Condition", a);
   var ConditionStage = obj.GetField("ConditionStage");
   var clearedDate = obj.GetField("ClearedDate");

  if (ConditionStage!=null && clearedDate ==null) {
  PTD_Outstanding = true;
  }
}
return PTD_Outstanding;
}


}

function RunMacro9() { // 2018HMDAActionTaken11c:  Application Withdrawn By Applicant
// When the Status.CanceledDate is not null
// and ExtendedField.Cancel01 = Yes, // Borrower requested withdrawal
// AND when ExtendedField.Cancel09 != null // Date of Borrower Withdrawal Req
// When the Status.ClearToCloseDate = null
// then set HMDA.ActionTaken = 4, Withdrawn
// and set ExcludeFromHMDA to FALSE
// and set HMDA Type of Purchaser to 0


if ((los.GetField("Status.LoanStatus") == "10") /* Canceled */
    && los.GetField("Status.ClearToCloseDate") == null)
{
 if (los.GetField("ExtendedFields.Loan_Cancel01") == "Yes" &&
     los.GetField("ExtendedFields.Loan_Cancel09") != null)
{
  
 los.SetField("HMDA.ActionTaken", 4);// Withdrawn by applicant
 los.SetField("Loan.ExcludeFromHMDA", false);



 }
 }

}

function RunMacro10() { // 2018HMDAActionTaken11d: File Closed for Incompleteness
// When the Loan Status = Canceled
// and the ExtendedField.Loan_Cancel04 = YES "Was the NOIA notice sent?"
// and the current date is greater than 10 days from the ExtendedField.Loan_Cancel05 date, "The date the NOIA is issued"
// and the ExtendedField.Loan_Cancel08 = null "Date Borrower responded with outstanding items"
// and the Status.ClearToCloseDate = null
// set the HMDA.ActionTaken to 5, Filed Closed for Incompleteness
// and set ExcludeFromHMDA to FALSE
// and set HMDA Type of Purchaser to 0


if (los.GetField("Status.LoanStatus")==10) { // Canceled 
var channel = false; 
switch(los.GetField("FileData.OriginationChannel")){
case 1: // Retail
case 3: //Wholesale
case 5: //Mini-Corr
channel = true; break; 
}

if (los.GetField("Status.LoanStatus") == 10 /*Canceled*/){
 if (los.GetField("Status.ClearToCloseDate") == null) {
 if (los.GetField("ExtendedFields.Loan_Cancel04") == "Yes" &&
 los.GetField("ExtendedFields.Loan_Cancel08") ==null){
  
 var today = new Date();
 var daysDiff =  Math.floor(Math.abs(today.getTime() - new Date(los.GetField("ExtendedFields.Loan_Cancel05")).getTime())/86400000); 
 if (daysDiff >= 10) {
  
 los.SetField("HMDA.ActionTaken", 5);// Filed Closed for Incompleteness
 los.SetField("Loan.ExcludeFromHMDA", false);
 }
 }
}
}
}
}

function RunMacro11() { // 2018HMDAActionTaken11e: Loan Purchased by your Institution
// When FileData.OriginationChannel = 4
// and Status.LoanStatus = funded or any other custom status //this can be any status client choosed for Loans Purchased by Institution
// then set HMDA.ActionTaken =6, Purchased Correspondent Loan
// and set ExcludeFromHMDA to FALSE
//    set HMDA Type of Purchaser to 0
//    set HMDA Preapproval to 3-NA
//    set HMDA IncomeNA to true




if (los.GetField("Status.LoanStatus") == 14 /*funded*/){
  if (los.GetField("FileData.OriginationChannel") == 4) /*Correspondent*/ {
   los.SetField("HMDA.ActionTaken", 6); // Purchased Correspondent Loan
   los.SetField("Loan.ExcludeFromHMDA", false);
   los.SetField("Loan.HMDAPreapproval", 3) //NA 
   los.SetField("HMDA.GrossAnnualIncomeNA", true);
  }
  
 }

}

function RunMacro12() { // 2018HMDAActionTaken11f: Preapproval Request Denied by Financial Institution
// At Status.DeniedDate
// when Loan.LoanPurpose = 1-Purchase, 
// For Origination Channels 1-Retail and 3-Wholesale
// and Status.Preapproval ApplicationDate is not blank
// and TBD = YES,
// then set HMDA.ActionTaken = 7, Preapproval Request Denied
// and set ExcludeFromHMDA to FALSE
// and set Loan.HMDAPreapproval to 1
// and set Loan.HMDATypeofPurchaser to 0
// and set HMDA.StateCodeNA to true
// and set HMDA.CountyCodeNA to true
// and set HMDA.CensusTractNA to true



if (los.GetField("Status.LoanStatus") == 7 /*declined*/)
{
  if (los.GetField("FileData.OriginationChannel") == 1 || los.GetField("FileData.OriginationChannel") == 3) 
{
 if (los.GetField("Loan.LoanPurpose")== 1 /*Purchase*/)  
{
if ((los.GetField("SubProp.PropertyTBD") == true || los.GetField("SubProp.Street")== "TBD") &&
     los.GetField("Status.PreapprovalApplicationDate") != null)
{
 
   
   los.SetField("HMDA.ActionTaken", 7); // Preapproval Request Denied
   los.SetField("Loan.ExcludeFromHMDA", false);
   los.SetField("Loan.HMDAPreapproval", 1);
   los.SetField("HMDA.CountyCodeNA", true);
  los.SetField("HMDA.CensusTractNA", true);
  }
  }
  }
  }
}

function RunMacro13() { // 2018HMDAActionTaken11g: Preapproval Request Approved But Not Accepted
//  For Origination Channels 1-Retail and e-Wholesale, 
//  At status change = Canceled 
//  when Loan.LoanPurpose = 1-Purchase
//  Approved Date is not null//
//  when PreapprovalApplicationDate is not null 
//  and SubProp.StreetName = TBD or TBD = YES,
//  
//  then set HMDA.ActionTaken = 8, Preapproval Request Approved but not Accepted 
//  set ExcludeFromHMDA to false
//  set Preapproval Requested
//  set Loan.HMDATypeOfPurchaser to 0
//  set HMDA.StateCodeNA to true
//  set HMDA.CountyCodeNA to true
//  set HMDA.CensusTractNA to true



 if (los.GetField("Status.LoanStatus") == 10 /*canceled*/){
  if (los.GetField("Status.ApprovedDate") !=null && los.GetField("Status.PreapprovalApplicationDate") !=null) {
  if (los.GetField("FileData.OriginationChannel") == 1 || los.GetField("FileData.OriginationChannel") == 3) {
  if (los.GetField("SubProp.PropertyTBD") == true || los.GetField("SubProp.Street")== "TBD"){
  if (los.GetField("Loan.LoanPurpose")== 1 /*Purchase*/) {
   
   los.SetField("HMDA.ActionTaken", 8); // Preapproval Request Approved but not Accepted 
   los.SetField("Loan.ExcludeFromHMDA", false)
   los.SetField("HMDA.CountyCodeNA", true)
   los.SetField("HMDA.CensusTractNA", true);
  }
  }
  }
  }
 }

}

function RunMacro14() { // 2018HMDA12:  Set HMDA Action Date
//HMDA SetActionDate
/*Start*/
var declined = los.GetField("Status.DeclinedDate");
var canceled = los.GetField("Status.CanceledDate");
var funded = los.GetField("Status.FundingDate"); //you can also include a custom status date for Correspondent loans that are purchased  
// Please DO NOT USE Purchased Status for Correspondent Purchased.  This should be reserved for Investor Purchased.


var str = "";
switch (los.GetField("Status.LoanStatus")) {
    case 7: str = declined; break;
    case 10: str = canceled; break;
    case 14: str = funded; break;
}
var hmdaAction = str != "" ? true : false;

if (los.GetField("FileData.OriginationChannel") == 1 ||
        los.GetField("FileData.OriginationChannel") == 3) {


    if (declined != null || canceled != null || funded != null) {

        if (hmdaAction == true) {
            los.SetField("HMDA.ActionDate", str);
        }
    }
    else if (declined == null && canceled == null && funded == null) {
        los.SetField("HMDA.ActionDate", null);
    }

    if (los.GetField("HMDA.ActionTaken") == 4) {
        los.SetField("HMDA.ActionDate", los.GetField("ExtendedFields.Loan_Cancel09"))
    }
}


if (los.GetField("FileData.OriginationChannel") == 4) {
    if (los.GetField("Status.LoanStatus") == 14) {  // you can enter custom status if needed here
        los.SetField("HMDA.ActionDate", funded);
    }
}


/*End*/

}

function RunMacro15() { // HMDA0013a:  TBD Set, SubPropStreet add TBD
try
{
if (ev.TableAndFieldName=="SubProp.PropertyTBD") 

{

  if (los.GetField("SubProp.PropertyTBD") == true)

  {
    los.SetField("SubProp.Street", "TBD");

  }
  else
  if (los.GetField("SubProp.PropertyTBD") == false)

  {

    los.SetField("SubProp.Street", null);

    los.Application.ShowMessageBox("You must fill in the subject property street address before you can move forward in the loan.");

  }

};
}
catch(err)
{
MessageBox.Show("Macro HMDA002a:\r\n\r\n" + err);
}

}

function RunMacro16() { // HMDA0013b:  Must enter Street Address when TBD unchecked
try
{
if (ev.TableAndFieldName=="SubProp.Street") 

{

  if ((los.GetField("SubProp.PropertyTBD") == true) &&

      (ev.NewValue != "TBD"))

  {

    los.Application.ShowMessageBox("You cannot change the Subject Property Street Address when TBD box is set True.  To correct, set TBD box false.");

    ev.Cancel=true;

  }

}
}
catch(err)
{
MessageBox.Show("Macro HMDA002b:\r\n\r\n" + err);
};


}

function RunMacro17() { // 2018HMDA17a: County Code NA
// and the SubProp.TBD = true 
// If HMDAAction Taken = Canceled for Incompleteness, Preapproval Requested but Denied, or Preapproval Request approved but not accepted 
// and SubProp.County = null
// Set HMDA.CountyCodeNA to True


if (los.GetField("SubProp.PropertyTBD") == true) 
{
if ((los.GetField("HMDA.ActionTaken") == "5") /* File Closed For Incompleteness */)
{
if (los.GetField("SubProp.CountyCode") == null)
{
los.SetField("HMDA.CountyCodeNA", true)
}
}
};


}

function RunMacro19() { // 2018HMDA95: MLO NMLS Identifier NA
if (los.GetField("FileData.IsBusinessPurpose") == true ||
   (los.GetField("LO.ContactNMLSID") == "")) 
{
los.SetField("HMDA.MLO_NMLSID_NA", true)
}
}

function RunMacro20() { // 2018HMDA110:  Business or Commerical Purpose
//If the Occupancy is Primary or Second Home
//and the "Is Business Purpose field = true
// macro to change value to False for "Is Business Purpose"


if ((los.GetField("FileData.OccupancyType") == "1") /* Primary Residence */ ||
    (los.GetField("FileData.OccupancyType") == "2") /* Secondary Residence */ &&
    (los.GetField("FileData.IsBusinessPurpose") == true)) 
{
los.SetField("FileData.IsBusinessPurpose", false)
}
}

function RunMacro21() { // 2018HMDA:  Set HMDA Denial Reason
if ((los.GetField("Status.LoanStatus") == "7") /* Declined */)
{
los.SetField("Loan.HMDADenialReason1", los.GetField("HMDACalcs.DenialReason1"))
}
}

function RunMacro22() { // NMLS001:  Set Loan to Exclude from NMLS
//when FileData.OriginationChannel = 4 or 5, set Loan.ExcludeFromNMLSCallReport to TRUE

// Constants Can be found at: https://www.bytesoftware.com/byteproenterprise/download/900/DataDictionary.html

//OriginationChannel Constants
var NotAssigned = 0;
var Retail = 1;
var BrokeredOut = 2;
var Wholesale = 3;
var Correspondent = 4;
var MiniCorr = 5;

var OriginationChannel = los.GetField("FileData.OriginationChannel")

//If OriginationChannel is Correspondent or MiniCorr then Exclude from NMLS Call Report
if (OriginationChannel == Correspondent ||
    OriginationChannel == MiniCorr)
{
    los.SetField("Loan.ExcludeFromNMLSCallReport", true)
}
}

function RunMacro24() { // NMLS001b:  Status to Include Loans in NMLS for Retail, Brokered Out and WH
//Origination Channel Constants
var Retail = 1;
var BrokeredOut = 2;
var Wholesale = 3;
var Correspondent = 4;
var MiniCorrespondent = 5;

//Loan Status Constants
var Prospect = 2;
var Lead = 11;
var Purchased = 15;

var OriginationChannel = los.GetField("FileData.OriginationChannel");
var LoanStatus = los.GetField("Status.LoanStatus");

if ((OriginationChannel == Retail ||
    OriginationChannel == BrokeredOut || 
    OriginationChannel == Wholesale) 
    &&
    (LoanStatus == Lead ||
    LoanStatus == Prospect))
{
    los.SetField("Loan.ExcludeFromNMLSCallReport", true)
}
}

function RunMacro25() { // NMLS001c:  Set Loan be included in NMLS, Retail, Brokered Out & WH
//Origination Channel Constants
var Retail = 1;
var BrokeredOut = 2;
var Wholesale = 3;
var Correspondent = 4;
var MiniCorrespondent = 5;

var OriginationChannel = los.GetField("FileData.OriginationChannel");
var HasSixAppDataPoints = los.GetField("Status.HasSixAppDataPoints");

if ((OriginationChannel == Retail || 
    OriginationChannel == BrokeredOut || 
    OriginationChannel == Wholesale)
    &
    HasSixAppDataPoints == true)
{
    los.SetField("Loan.ExcludeFromNMLSCallReport", false);
}
}

function RunMacro26() { // NMLS001d:  Lead Status to be Excluded from NMLS for Retail, Brokered Out and WH
//Origination Channel Constants
var Retail = 1;
var BrokeredOut = 2;
var Wholesale = 3;
var Correspondent = 4;
var MiniCorrespondent = 5;

//Loan Status Constants
var Lead = 11;

var OriginationChannel = los.GetField("FileData.OriginationChannel");
var LoanStatus = los.GetField("Status.LoanStatus");

if ((OriginationChannel == Retail ||
    OriginationChannel == BrokeredOut || 
    OriginationChannel == Wholesale) 
    &&
    (LoanStatus == Lead))
   {
    los.SetField("Loan.ExcludeFromNMLSCallReport", true)
}
}

function RunMacro30() { // NMLS005: Set NMLSInvestorTypeOV
//LoanStatus Constants
var Purchased = 15;

//ServicingOption Constants


//NMLSInvestorTypeOV Constants
var NotAssigned = 0;
var SoldToAgency = 1;
var SoldToOthersNonAffiliate = 2;
var SoldToOthersAffiliate = 3;
var KeptInPortfolio = 4;
var SoldWithSaleTreatment = 5;
var SoldWithoutSaleTreatment = 6;

//Investor Codes
var FannieCode = "FNMA";
var FreddieCode = "FHLMC";
var GinnieCode = "GNMA";


var LoanStatus = los.GetField("Status.LoanStatus");
var InvestorCode = los.GetField("Party.InvestorCode");


if (LoanStatus == Purchased)
{
    los.SetField("Loan.NMLSInvestorTypeOV", SoldToAgency)
}

//Check if Investor is Fannie/Freddie/Ginnie
if (InvestorCode.Contains(FannieCode) ||
    InvestorCode.Contains(FreddieCode) ||
    InvestorCode.Contains(GinnieCode))
{
    los.SetField("Loan.NMLSInvestorTypeOV", SoldToAgency)
}
}

function RunMacro31() { // NMLS006: Set Prepay
//If loan does not have value set for Loan.PrepaymentPenaltyOption set to 1, 2 or 3, default to 3-Will Not

//PrepaymentPenaltyOption Constants
var NotAssigned = 0;
var May = 1;
var Will = 2;
var WillNot = 3;

var PrepaymentPenaltyOption = los.GetField("Loan.PrepaymentPenaltyOption");

if (PrepaymentPenaltyOption == NotAssigned)
{
    los.SetField("Loan.PrepaymentPenaltyOption", WillNot);
}
}

function RunMacro32() { // NMLS007: Loan is Jumbo
//Constants can be located at: https://www.bytesoftware.com/byteproenterprise/download/900/DataDictionary.html

//LoanStatus Constants
var Funded = 14;
var Purchased = 15;

//Yes/No/NA Constants
var NA = 0;
var Yes = 1;
var No = 2;

var LoanStatus = los.GetField("Status.LoanStatus");
var LoanProgramCode = los.GetField("Loan.LoanProgramCode");
var LoanProgramName = los.GetField("Loan.LoanProgramName");
var ContainsJumbo = false;

// Verify the Loan is a Jumbo or HB
if (LoanProgramCode.Contains("Jumbo") ||
    LoanProgramName.Contains("Jumbo") ||
    LoanProgramCode.Contains("HB") || 
    LoanProgramName.Contains("HB"))
{
    ContainsJumbo = true;
}

if ((LoanStatus == Funded ||
    LoanStatus == Purchased) &&
    ContainsJumbo)
{
    los.SetField("Loan.IsJumbo", Yes)
}
else
{
    los.SetField("Loan.IsJumbo", No)
}
}

function RunMacro33() { // NMLS008:  Set Property Type
// When loans status is set to approved, funded, Canceled, denied or Purchased,  
// and When SubProp.PropertyType = 1, 2, 3, 4, 5, 6, 7 
// and SubProp.NoUnits = 1-4,  
// set HMDA.PropertyType:  "1" = One to Four Family ,   
//(When SubProp.PropertyType = 8, 9, 10, 11),  
// then set HMDA.PropertyType to  "2" = Manufactured housing
//  When SubProp.NoUnits = >4 then set HMDA.PropertyType to   "3" = Multi-Family 
// (When )  All else "0" = null


if ((los.GetField("Status.LoanStatus") == "5") /* Approved */ ||
    (los.GetField("Status.LoanStatus") == "14") /* Funded */ ||
    (los.GetField("Status.LoanStatus") == "7") /* Declined */ ||
    (los.GetField("Status.LoanStatus") == "10") /* Canceled */)
{
  if ((los.GetField("SubProp.PropertyType") == "1") /* Detached */ ||
      (los.GetField("SubProp.PropertyType") == "2") /* Attached */ ||
      (los.GetField("SubProp.PropertyType") == "3") /* Condominium */ ||
      (los.GetField("SubProp.PropertyType") == "4") /* High Rise Condo */ ||
      (los.GetField("SubProp.PropertyType") == "5") /* Detached Condo */ ||
      (los.GetField("SubProp.PropertyType") == "6") /* PUD */ ||
      (los.GetField("SubProp.PropertyType") == "7") /* Cooperative */)
  {
    if ((los.GetField("SubProp.NoUnits") >= 1) && 
        (los.GetField("SubProp.NoUnits") <= 4))
    {
      los.SetField("HMDA.PropertyType", 1);
    }
    else
    if (los.GetField("SubProp.NoUnits") > 4)
    {
      los.SetField("HMDA.PropertyType", 3);
    }
  }
  else
  if ((los.GetField("SubProp.NoUnits") <= 4) &&
      (los.GetField("SubProp.PropertyType") == "8") /* Manufactured */ ||
     (los.GetField("SubProp.PropertyType") == "9") /* Manufactured Condo/PUD/Co-Op */ ||
     (los.GetField("SubProp.PropertyType") == "10") /* Manufactured Singlewide */ ||
     (los.GetField("SubProp.PropertyType") == "11") /* Manufactured Multiwide */)
  {
    los.SetField("HMDA.PropertyType", 2);
  }
  else
  if (los.GetField("SubProp.NoUnits") > 4)
  {
    los.SetField("HMDA.PropertyType", 3);    
  }
  else
  {
    los.SetField("HMDA.PropertyType", 0);    
  }
}



}

function RunMacro34() { // NMLS009:  Set NMLS Loan Purpose
if ((los.GetField("Loan.HMDALoanPurpose2") == "1") /* Home Purchase */)
los.SetField("Loan.HMDALoanPurpose", 1);
{
if ((los.GetField("Loan.HMDALoanPurpose2") == "2") /* Home Improvement */)
los.SetField("Loan.HMDALoanPurpose", 2);
{
if ((los.GetField("Loan.HMDALoanPurpose2") == "31") /* Refinancing */ ||
 (los.GetField("Loan.HMDALoanPurpose2") == "32") /* Cash-out refinancing */)
{
los.SetField("Loan.HMDALoanPurpose", 3)

}
}
}
}

function RunMacro35() { // NMLS010:  Set "Is Chattel Loan" to true
if ((los.GetField("Loan.HMDALienStatus") == "3") /* Not Secured by a Lien */)
{
los.SetField("SubProp.IsChattelLoan", true)
}
else
los.SetField("SubProp.IsChattelLoan", false);


}

function RunMacro36() { // Lender Credit Header:  Set Lump Sum Lender $ Credit if Total Lender Credit is greater than 0
//Sets Lump Sum credit on LE and CD based on Total Lender Credit if greater than 0

if ((los.GetField("Status.LoanStatus") == "16") /* Clear To Close */ || (los.GetField("Status.LoanStatus") == "8") /* In Closing */)
{
  if ((los.GetField("ExtendedFields.LenderCreditCC05") != null) && 
      (los.GetField("ExtendedFields.LenderCreditCC05") > 0))
  {
  //Do something
  los.SetField("Loan.YSPAmount2", (los.GetField("ExtendedFields.LenderCreditCC05"))
  )}
  else if ((los.GetField("ExtendedFields.LenderCreditCC05") != null) && 
      (los.GetField("ExtendedFields.LenderCreditCC05") <= 0))
  {
  //Do something
  los.SetField("Loan.YSPAmount2", null)
  }
}

}

function RunMacro37() { // Fair Lending 01: Set Lender Credit on CD pg 2 from Fee Waiver Screen
if (ev.TableAndFieldName== "ExtendedFields.LenderCreditCC05")
{
los.SetField("Loan.YSPAmount2", los.GetField("ExtendedFields.LenderCreditCC05"))
}

}

function RunMacro38() { // Fair Lending 02: LenderCreditCC10
if (ev.TableAndFieldName=="ClosingCost.SellerAmount" || ev.TableAndFieldName == "ClosingCost.PaidByOtherType"){
los.SetField("ExtendedFields.LenderCreditCC10",ClosingCost())
}

function ClosingCost(){
var totalSellerAmt = 0.00;
var count = ev.File.GetCollectionCount("ClosingCost");
for(var i = 1; i < count; i++){
var CC : SDKObject = ev.File.GetCollectionObject("ClosingCost",i);
var SellerAmt = CC.GetField("SellerAmount"); 
var LineNo = CC.GetField("HUDLineNo"); 
var ResponsibleParty = CC.GetField("ResponsiblePartyType");

if (ev.File.DoesChildObjectExist("CC"+LineNo) && los.GetField("CC"+LineNo+".SellerAmount") != null &  ResponsibleParty == 0  /*Buyer*/ && CC.GetField("PaidByOtherType") == 1) {
totalSellerAmt += los.GetField("CC"+LineNo+".SellerAmount");

}              
} 
return totalSellerAmt; 
} 
}

function RunMacro39() { // Fair Lending 03: Pricing Variance Approved and needs to be applied - Email
var ApprovalDate = "ExtendedFields.FWFeeWaiverApprovalDate";
if (ev.TableAndFieldName == (ApprovalDate+1) || ev.TableAndFieldName == (ApprovalDate+2) || ev.TableAndFieldName == (ApprovalDate+3))
{

var i = 1;
while (i < 4){

if ((los.GetField("ExtendedFields.FWFeeAmtToBeWaived"+i) > 0 || los.GetField("ExtendedFields.FWPricingVarReq"+i) > 0) && ev.NewValue != ev.OldValue) {
var mail = new SDKMail;
mail.ToAddress="LO.Email"; //Secondary Marketing email
//mail.CCAddress="";
//mail.BCCAddress="bcc@yourcompany.com";
mail.Subject="Loan Adjustment Approved: " + "File" + los.GetField("FileData.FileName") + ", " + los.GetField("Bor1.LastName"); 
mail.Message= "A pricing adjustment has just been approved, please add the manual adjustment to pricing.";
mail.Send();
}
i++; 
}

}

}

function RunMacro40() { // LockMonitor01::Set flag when LOAN PROGRAM changes
// If loan is locked,
// and not funded
// and PPEflag is false
// and Loan Program changes
// and the Exclude from Lock Monitor flag is false
// Set PPEFlag to true
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
if ((los.GetField("Loan.LockStartDate") != null) 
    && (PPEFlag) == false
    && (los.GetField("Status.FundingDate") == null)) 
{ 
  (PPEFlag) = true;
  los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
  los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
};
}

function RunMacro41() { // LockMonitor02::Set flag when INTEREST RATE changes
// If loan is locked,
// and PPEflag is false
// and if interest rate changes
// Set PPEFlag to true

if (ev.TableAndFieldName=="Loan.IntRate") 
{ 
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
  if ((los.GetField("Loan.LockStartDate") != null) 
     && (PPEFlag) == false
     && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false)) 
  {
    var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
    var PPEFlagDate = System.DateTime.Now;
    if (ev.OldValue != ev.NewValue)
    PPEFlag = true;
    los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
    los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
  };
};
}

function RunMacro42() { // LockMonitor03::Set flag when LOAN AMOUNT falls out of bucket
// If loan is locked,
// and PPEflag is false
// and loan amount changes above or below:
// assumes hits apply to <50k, >424.1k, >1mm, and >1.5mm
// and Exclude from Lock Monitor is false

// This macro never sets PPEFlag = true;

if (ev.TableAndFieldName == "Loan.LoanWith") 
{ 
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
  if ((los.GetField("Loan.LockStartDate") != null) 
      && (PPEFlag) == false 
      && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false)) 
  {
    if ((ev.OldValue < 50000) && (ev.NewValue >= 50000))
      {(PPEFlag) = true;}
    else if ((ev.OldValue >= 50000) && (ev.NewValue <50000))
      {(PPEFlag) = true;}
    else if ((ev.OldValue <= 548250) && (ev.NewValue > 548250))
      {(PPEFlag) = true;}
    else if ((ev.OldValue > 548250) && (ev.NewValue <= 548250))
      {(PPEFlag) = true;}
    else if ((ev.OldValue <= 1000000) && (ev.NewValue > 1000000))
      {(PPEFlag) = true;}
    else if ((ev.OldValue > 1000000) && (ev.NewValue <= 1000000))
      {(PPEFlag) = true;}
    else if ((ev.OldValue <= 1500000) && (ev.NewValue > 1500000))
      {(PPEFlag) = true;}
    else if ((ev.OldValue > 1500000) && (ev.NewValue <= 1500000))
      {(PPEFlag) = true;}
    los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
    los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
  }
};
}

function RunMacro43() { // LockMonitor04::Set flag when LOCKED LOAN AMT changes 10%
// If loan is locked,
// and PPEflag is false
// and Exclude from Lock Monitor = false,
// and base loan amount increases/decreases more than 10%,
// Set PPEFlag to true



if ((ev.TableAndFieldName == "Loan.BaseLoan") 
   && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false))
{ 
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
  if (los.GetField("ExtendedFields.BSPSOrigLockedAmount") > 0)
    {var OriginalLockedAmt = Math.round(los.GetField("ExtendedFields.BSPSOrigLockedAmount"))}
  else {var OriginalLockedAmt = 0};

  if ((los.GetField("Loan.LockStartDate") != null) 
  && (PPEFlag) == false)
  {
    if (OriginalLockedAmt > 0)
    {
      if ((ev.NewValue > Math.round(OriginalLockedAmt * 1.10)) || (ev.NewValue < Math.round (OriginalLockedAmt - (OriginalLockedAmt * .10))))
         PPEFlag = true;
      los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
      los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
    }
  }
};
}

function RunMacro44() { // LockMonitor05::Set flag when LTV falls out of bucket
// If loan is locked,
// and PPEflag is false
// and Exclude from Lock Monitoring is false,
// and if LTV changes above or below:
// 60, 65, 70, 75, 80, 85, 90, 95, 97, 100,
// then set PPE Flag to True

var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
var PPEFlagDate = System.DateTime.Now;
if ((los.GetField("Loan.LockStartDate") != null) 
    && (PPEFlag) == false 
    && (ev.File.GetCollectionCount("LockHistory")>0) 
    && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false)) 
{
  var LockHistoryCount = ev.File.GetCollectionCount("LockHistory");  
  var LockHistory = ev.File.GetCollectionObject("LockHistory", LockHistoryCount); //gets last one.  if want first one, put 1
  var PreviousLTV = LockHistory.GetField("LTV");
  var CurrentLTV = los.GetField("Loan.LTV") 
  if (PreviousLTV != CurrentLTV) 
  {  
    if ((PreviousLTV <= 60) && (CurrentLTV > 60))
      PPEFlag = true;
    else if ((PreviousLTV > 60) && (CurrentLTV <= 60))
      PPEFlag = true;
    else if ((PreviousLTV <= 65) && (CurrentLTV > 65))
      PPEFlag = true;
    else if ((PreviousLTV > 65) && (CurrentLTV <= 65))
      PPEFlag = true;
    else if ((PreviousLTV <= 70) && (CurrentLTV > 70))
      PPEFlag = true;
    else if ((PreviousLTV > 70) && (CurrentLTV <= 70))
      PPEFlag = true;
    else if ((PreviousLTV <= 75) && (CurrentLTV > 75))
      PPEFlag = true;
    else if ((PreviousLTV > 75) && (CurrentLTV <= 75))
      PPEFlag = true;
    else if ((PreviousLTV <= 80) && (CurrentLTV > 80))
      PPEFlag = true;
     else if ((PreviousLTV > 80) && (CurrentLTV <= 80))
      PPEFlag = true;
    else if ((PreviousLTV <= 85) && (CurrentLTV > 85))
      PPEFlag = true;
    else if ((PreviousLTV > 85) && (CurrentLTV <= 85))
      PPEFlag = true;
    else if ((PreviousLTV <= 90) && (CurrentLTV > 90))
      PPEFlag = true;
    else if ((PreviousLTV > 90) && (CurrentLTV <= 90))
      PPEFlag = true;
    else if ((PreviousLTV <= 95) && (CurrentLTV > 95))
     PPEFlag = true;
    else if ((PreviousLTV > 95) && (CurrentLTV <= 95))
      PPEFlag = true;
    else if ((PreviousLTV <= 97) && (CurrentLTV > 97))
      PPEFlag = true;
    else if ((PreviousLTV > 97) && (CurrentLTV <= 97))
      PPEFlag = true;
    else if ((PreviousLTV <= 100) && (CurrentLTV > 100))
      PPEFlag = true;
    else if ((PreviousLTV > 100) && (CurrentLTV <= 100))
      PPEFlag = true;  
  }
  los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
  los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
};

}

function RunMacro45() { // LockMonitor06::Set flag when CLTV falls out of bucket
// If loan is locked,
// and PPEflag is false
// and Exclude from Loan Monitoring is false,
// and CurrentLTV not equal to CurrentCLTV
// and if CLTV changes above or below these ranges,
// 85, 90, 95, 97, 100
// then set PPE Flag to True
var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
var PPEFlagDate = System.DateTime.Now;
if ((los.GetField("Loan.LockStartDate") != null) 
    && (PPEFlag) == false 
    && (ev.File.GetCollectionCount("LockHistory")>0) 
    && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false)) 
{  

  var LockHistoryCount = ev.File.GetCollectionCount("LockHistory");  
  var LockHistory = ev.File.GetCollectionObject("LockHistory", LockHistoryCount); //gets last one.  if want first one, put 1
  var PreviousCLTV = LockHistory.GetField("CLTV");
  var CurrentCLTV = los.GetField("Loan.CLTV")
  var CurrentLTV = los.GetField("Loan.LTV")

  if (PreviousCLTV != CurrentCLTV)
  {
    if ((PreviousCLTV <= 80) && (CurrentCLTV > 80))
      (PPEFlag) = true;
    else if ((PreviousCLTV > 80) && (CurrentCLTV <= 80))
      (PPEFlag) = true;
    else if ((PreviousCLTV <= 85) && (CurrentCLTV > 85))
      (PPEFlag) = true;
    else if ((PreviousCLTV > 85) && (CurrentCLTV <= 85))
      (PPEFlag) = true;
    else if ((PreviousCLTV <= 90) && (CurrentCLTV > 90))
      (PPEFlag) = true;
    else if ((PreviousCLTV > 90) && (CurrentCLTV <= 90))
      (PPEFlag) = true;
    else if ((PreviousCLTV <= 95) && (CurrentCLTV > 95))
      (PPEFlag) = true;
    else if ((PreviousCLTV > 95) && (CurrentCLTV <= 95))
      (PPEFlag) = true;
    else if ((PreviousCLTV <= 97) && (CurrentCLTV > 97))
      (PPEFlag) = true;
    else if ((PreviousCLTV > 97) && (CurrentCLTV <= 97))
      (PPEFlag) = true;
    else if ((PreviousCLTV <= 100) && (CurrentCLTV > 100))
      (PPEFlag) = true;
    else if ((PreviousCLTV > 100) && (CurrentCLTV <= 100))
      (PPEFlag) = true;
  }
    los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
    los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
};

}

function RunMacro46() { // LockMonitor07::Set flag when DEBT RATIO falls out of buckets
// If loan is locked,
// and PPEflag is false
// and Exclude from Lock Monitoring is false,
// and if DTI changes above or below these ranges,
// VA - 36, 40, 45
// FHA - 36, 41, 45, 50, 55
// all others - 36, 43, 45, 50, 55
// then set PPE Flag to True
// If retail, it will always consult the calculated DTI.  Other channels use the declared DTI until UW approved.
var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
var PPEFlagDate = System.DateTime.Now;
if ((los.GetField("Loan.LockStartDate") != null) 
    && (PPEFlag) == false 
    && (ev.File.GetCollectionCount("LockHistory")>0) 
    && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false))
{ 

  var LockHistoryCount = ev.File.GetCollectionCount("LockHistory");  
  var LockHistory = ev.File.GetCollectionObject("LockHistory", LockHistoryCount); //determines most current snapshot
//var ID = LockHistory.GetField("LoanLockRequestID");
  var PreviousDTI = LockHistory.GetField("SecondRatio");
  var CurrentDTI = los.GetField("Loan.SecondRatio")
  if ((los.GetField("FileData.OriginationChannel") != 1) 
     && (los.GetField("Status.ApprovedDate") == null)) 
    {CurrentDTI = los.GetField("Secondary.DeclaredSecondRatio");};
  var ProgramCode = los.GetField("Loan.LoanProgramCode") 

  if (PreviousDTI != CurrentDTI)
  {            
    if (los.GetField("Loan.MortgageType") == "1")/*VA*/
    {
      if ((PreviousDTI <= 36) && (CurrentDTI > 36))
        {(PPEFlag) = true;}
      else if ((PreviousDTI > 36) && (CurrentDTI <= 36))
        {(PPEFlag) = true;}
      else if ((PreviousDTI <= 40) && (CurrentDTI > 40))
        {(PPEFlag) = true;}
      else if ((PreviousDTI > 40) && (CurrentDTI <= 40))
        {(PPEFlag) = true;}
      else if ((PreviousDTI <= 45) && (CurrentDTI > 45))
        {(PPEFlag) = true;}
      else if ((PreviousDTI > 45) && (CurrentDTI <= 45))
        {(PPEFlag) = true;}
      los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
      los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
    }  
    else if (los.GetField("Loan.MortgageType") == "2")/*FHA*/
    {
      if ((PreviousDTI <= 36) && (CurrentDTI > 36))
        {(PPEFlag) = true;}
      else if ((PreviousDTI > 36) && (CurrentDTI <= 36))
        {(PPEFlag) = true;}
      else if ((PreviousDTI <= 41) && (CurrentDTI > 41))
        {(PPEFlag) = true;}
      else if ((PreviousDTI > 41) && (CurrentDTI <= 41))
        {(PPEFlag) = true;}
      else if ((PreviousDTI <= 45) && (CurrentDTI > 45))
       {(PPEFlag) = true;}
      else if ((PreviousDTI > 45) && (CurrentDTI <= 45))
        {(PPEFlag) = true;}
      else if ((PreviousDTI <= 50) && (CurrentDTI > 50))
        {(PPEFlag) = true;}
      else if ((PreviousDTI > 50) && (CurrentDTI <= 50))
        {(PPEFlag) = true;}
      else if ((PreviousDTI <= 55) && (CurrentDTI > 55))
        {(PPEFlag) = true;}
      else if ((PreviousDTI > 55) && (CurrentDTI <= 55))
        {(PPEFlag) = true;}
      los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
      los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
    }
    else 
    {
    if ((PreviousDTI <= 36) && (CurrentDTI > 36))
      {(PPEFlag) = true;}
     else if ((PreviousDTI > 36) && (CurrentDTI <= 36))
      {(PPEFlag) = true;}
     else if ((PreviousDTI <= 43) && (CurrentDTI > 43))
      {(PPEFlag) = true;}
     else if ((PreviousDTI > 43) && (CurrentDTI <= 43))
      {(PPEFlag) = true;}
     else if ((PreviousDTI <= 45) && (CurrentDTI > 45))
      {(PPEFlag) = true;}
     else if ((PreviousDTI > 45) && (CurrentDTI <= 45))
       {(PPEFlag) = true;}
     else if ((PreviousDTI < 50) && (CurrentDTI > 50))
       {(PPEFlag) = true;}
     else if ((PreviousDTI > 50) && (CurrentDTI <= 50))
       {(PPEFlag) = true;}
     else if ((PreviousDTI <= 55) && (CurrentDTI > 55))
       {(PPEFlag) = true;}
     else if ((PreviousDTI > 55) && (CurrentDTI <= 55))
      {(PPEFlag) = true;}
     los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
     los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);      
    }
  }
};

}

function RunMacro47() { // LockMonitor08::Set flag when PROPERTY TYPE changes
// If loan is locked,
// and Exclude from Lock Monitoring is false,
// and not funded
// and PPEflag is false
// and if PropertyType changes (except if change between Detached and PUD)
// then set PPE Flag to True

if (ev.TableAndFieldName == "SubProp.PropertyType")
{ 
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
  if ((los.GetField("Loan.LockStartDate") != null) 
      && (PPEFlag) == false 
      && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false))
  {

    if (((ev.OldValue == 1) && (ev.NewValue == 6))
       || ((ev.OldValue == 6) && (ev.NewValue == 1)))
     {
     }
     else if ((ev.OldValue != ev.NewValue))
       {(PPEFlag) = true;}       
     los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
     los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
  };
};
}

function RunMacro48() { // LockMonitor09::Set flag when # of UNITS changes
// If loan is locked,
// and not funded,
// and Exclude from Lock Monitor is false,
// and PPEflag is false
// and if Property # units changes (except if change between 3&4)
// then set PPE Flag to True

if (ev.TableAndFieldName == "SubProp.NoUnits") 
{ 
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
  if ((los.GetField("Loan.LockStartDate") != null) 
     && (PPEFlag) == false 
     && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false))   
  {

    if (ev.OldValue != ev.NewValue)
    {
      if ((ev.OldValue == 1) && (ev.NewValue != 1))
        {(PPEFlag) = true;}
      else if ((ev.OldValue == 2) && (ev.NewValue != 2))
        {(PPEFlag) = true;}
      else if ((ev.OldValue == 3 || ev.OldValue ==4) && (ev.NewValue == 1 || ev.NewValue == 2))
        {(PPEFlag) = true;}
      los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
      los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
    }
  }
};

}

function RunMacro50() { // LockMonitor11::Set flag when OCCUPANCY changes
// If loan is locked,
// and PPEflag is false,
// and Exclude from Lock Monitor is false,
// and if Occupancy changes 
// then set PPE Flag to True

if (ev.TableAndFieldName == "FileData.OccupancyType") 
{ 
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
  if ((los.GetField("Loan.LockStartDate") != null) 
     && (PPEFlag) == false 
     && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false))   
  {

    if (ev.OldValue != ev.NewValue)
      {(PPEFlag) = true;}
    los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
    los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);      
  };
};
}

function RunMacro51() { // LockMonitor12::Set flag when FICO falls out of bucket
// If loan is locked and not funded
// and PPEflag is false,
// and Exclude from Lock Monitor is false,
// and if Loan Credit Score changes above or below:
// 600, 620, 640, 660, 680, 700, 720, 740,
// then set PPE Flag to True
// Estimated FICO will be compared until actual FICO is determined.

var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
var PPEFlagDate = System.DateTime.Now;
if ((los.GetField("Loan.LockStartDate") != null) 
    && (PPEFlag) == false 
    && (ev.File.GetCollectionCount("LockHistory")>0) 
    && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false)) 
{ 

  var LockHistoryCount = ev.File.GetCollectionCount("LockHistory");  
  var LockHistory = ev.File.GetCollectionObject("LockHistory", LockHistoryCount); 
  var PreviousCredit = LockHistory.GetField("CreditScore")
  var CurrentCredit = los.GetField("FileData.FileCreditScore")
  if (CurrentCredit == null) 
    {CurrentCredit = los.GetField("FileData.EstimatedCreditScore");
}
if (PreviousCredit != CurrentCredit)
{    
  if ((PreviousCredit < 600) && (CurrentCredit >= 600))
    {(PPEFlag) = true;}
  else if ((PreviousCredit >= 600) && (CurrentCredit < 600))
    {(PPEFlag) = true;}
  else if ((PreviousCredit < 620) && (CurrentCredit >= 620))
    {(PPEFlag) = true;}
  else if ((PreviousCredit >= 620) && (CurrentCredit < 620))
    {(PPEFlag) = true;}
  else if ((PreviousCredit < 640) && (CurrentCredit >= 640))
    {(PPEFlag) = true;}
  else if ((PreviousCredit >= 640) && (CurrentCredit < 640))
    {(PPEFlag) = true;}
  else if ((PreviousCredit < 660) && (CurrentCredit >= 660))
    {(PPEFlag) = true;}
  else if ((PreviousCredit >= 660) && (CurrentCredit < 660))
    {(PPEFlag) = true;}
  else if ((PreviousCredit < 680) && (CurrentCredit >= 680))
    {(PPEFlag) = true;}
  else if ((PreviousCredit >= 680) && (CurrentCredit < 680))
    {(PPEFlag) = true;}
  else if ((PreviousCredit < 700) && (CurrentCredit >= 700))
    {(PPEFlag) = true;}
  else if ((PreviousCredit >= 700) && (CurrentCredit < 700))
    {(PPEFlag) = true;}
  else if ((PreviousCredit < 720) && (CurrentCredit >= 720))
    {(PPEFlag) = true;}
  else if ((PreviousCredit >= 720) && (CurrentCredit < 720))
    {(PPEFlag) = true;}
  else if ((PreviousCredit < 740) && (CurrentCredit >= 740))
    {(PPEFlag) = true;}
  else if ((PreviousCredit >= 740) && (CurrentCredit < 740))
    {(PPEFlag) = true;}       
  los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
  los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
  }
};
}

function RunMacro52() { // LockMonitor13::Set flag when PROPERTY ADDRESS changes
// If loan is locked,
// and PPEflag is false,
// and Exclude from Lock Monitor is false,
// and if Propert Address, City, State, or Zip changes 
// then set PPE Flag to True

if ((ev.TableAndFieldName == "SubProp.Street") 
     || (ev.TableAndFieldName == "SubProp.City") 
     || (ev.TableAndFieldName == "SubProp.State") 
     || (ev.TableAndFieldName == "SubProp.Zip"))
{ 
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
  if ((los.GetField("Loan.LockStartDate") != null) 
      && (PPEFlag) == false 
      &&  (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false)) 
  {
    if (ev.OldValue != ev.NewValue)
    {(PPEFlag) = true;}
    los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
    los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);  
  }
};
}

function RunMacro53() { // LockMonitor14::Set flag when ESCROW ELECTION changes
// If loan is locked,
// and Not Funded,
// and Exclude from Lock Monitor is false,
// and PPEflag is false
// and if interest rate changes
// Set PPEFlag to true

if (ev.TableAndFieldName=="FileData.WaiveEscrow") 
{ 
  var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
  var PPEFlagDate = System.DateTime.Now;
  if ((los.GetField("Loan.LockStartDate") != null) 
      && (PPEFlag) == false 
      && (los.GetField("ExtendedFields.BSPSExcludeFromLockMonitor") == false)) 
  {

    if (ev.OldValue != ev.NewValue)
      {(PPEFlag) = true;};
     los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
     los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);
  }
};
}

function RunMacro54() { // LockMonitor15::Capture the OriginalLockedLoanAmountb
// When Loan is locked (e.g. lock start date is changed),
// copy Total loan amt into OriginalLockedAmt 
// If loan is unlocked, remove any OriginalLockedAmt 

if (ev.TableAndFieldName == "Loan.LockStartDate")
{
  if (los.GetField("Loan.LockStartDate") != null)
  {
    los.SetField("ExtendedFields.BSPSOrigLockedAmount", los.GetField("Loan.LoanWith"));
  }
  else if (los.GetField("Loan.LockStartDate") == null)
  {
    los.SetField("ExtendedFields.BSPSOrigLockedAmount", null);
  }
};
}

function RunMacro56() { // LockMonitor16::Set Exclude From Lock Monitor flag
//  Sets the ExcludeFromLockMonitor flag depending upon current Loan Program Code.
//  Replace "PRODUCTA, B, C, & D" with your product exclusions.
//  To add a new Loan Program Code to this exclusion list, add a new case statement, plus
//  the SetField statement and the break statement.  For example, to add the Loan Program Code
//  SAMPLECODE to this list, you would add the following three lines of code just before the Default 
//  case:

// case "SAMPLECODE":
// los.SetField("ExtendedFields.BSPSExcludeFromLockMonitor", true);
// break;


switch (los.GetField("Loan.LoanProgramCode"))
{
case "PRODUCTA":
los.SetField("ExtendedFields.BSPSExcludeFromLockMonitor", true);
break;

case "PRODUCTB":
los.SetField("ExtendedFields.BSPSExcludeFromLockMonitor", true);
break;

case "PRODUCTC":
los.SetField("ExtendedFields.BSPSExcludeFromLockMonitor", true);
break;

case "PRODUCTD":
los.SetField("ExtendedFields.BSPSExcludeFromLockMonitor", true);
break;

default:
los.SetField("ExtendedFields.BSPSExcludeFromLockMonitor", false);
break;
};
}

function RunMacro57() { // LockMonitor 17 : Change in Underwriting Approval Method
// If loan is locked,
// and PPEflag is false
// and if UW Method changes from DU or LP to Manual
// Set PPEFlag to true


var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag")
var PPEFlagDate = System.DateTime.Now

  if (ev.TableAndFieldName=="Transmittal.RiskAssessmentMethod") 
    {
  if ((los.GetField("Loan.LockStartDate") != null) 
     && (PPEFlag) == false) 
    {
  if (ev.OldValue != ev.NewValue)
    {  (PPEFlag) = true;}
          los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
          los.SetField("Secondary.RepriceNeededDateAndTime", PPEFlagDate);

};

};

}

function RunMacro58() { // LockMonitor99::RESET lock validation flag
// If loan is locked,
// and PPEflag is true,
// and OB's PPEDate is > PPE Flag Date
// Set PPEFlag to false

var PPEFlag = los.GetField("ExtendedFields.BSPSLockValidationFlag");
var PPEFlagDate = los.GetField("Secondary.RepriceNeededDateAndTime"); 
if ((los.GetField("Loan.LockStartDate") != null) 
    && (PPEFlag) == true) 
{ 

  var BytePPEDate = new Date(PPEFlagDate);
  var PPETimePriced = los.GetField("Loan.PPETimePriced"); 
  if (PPETimePriced > BytePPEDate)
  {
    (PPEFlag) = false;
    los.SetField("ExtendedFields.BSPSLockValidationFlag", PPEFlag);
  }
};
}

function RunMacro67() { // QualAppAPP04 TBD Prevent Change to Street Address When TBD Is True
if (ev.TableAndFieldName=="SubProp.Street") 
{
  if ((los.GetField("SubProp.PropertyTBD") == true) &&
      (ev.NewValue != "TBD"))
  {
    los.Application.ShowMessageBox("You cannot change the Subject Property Street Address when TBD box is set True.  To correct, set TBD box false.");
    ev.Cancel=true;
  }
};

}

function RunMacro69() { // QualAppAPP07 revised
var Offset = 0;
var file = ev.File;
var borCount = file.GetCollectionCount("Borrower");

for (var a = 1; a <= borCount; a++)
{
  var bor = "Bor" + (a + Offset);
  if (file.DoesChildObjectExist(bor) == true)
  {
    var borrower = file.GetChildObject(bor,false);
    var FormerRes = borrower.GetCollectionCount("FormerResidence");
    var ResNoYears = bor + "Res.NoYears";
    var ResYear = los.GetField(ResNoYears);
    if (ResYear == undefined)
      ResYear = 0;
    var ResNoMonths = bor + "Res.NoMonths";
    var ResMonth = los.GetField(ResNoMonths);
    if (ResMonth == undefined)
      ResMonth = 0;
    for (var i = 1; i <= FormerRes; i++)
    {
      var OldRes = borrower.GetCollectionObject("FormerResidence", i);
      if(OldRes.GetField("NoYears") != undefined)
        ResYear = ResYear + OldRes.GetField("NoYears");
      if(OldRes.GetField("NoMonths") != undefined)
        ResMonth = ResMonth + OldRes.GetField("NoMonths");
    }
    ResYear = (ResYear * 12) + ResMonth;
    if (ResYear == 0)
    {
      MessageBox.Show(los.GetField(bor+".FullName") + " has no residence history.  Cannot update status.");
      ev.Cancel = true;
    }
    else
    if (ResYear < 24)
    {
      MessageBox.Show(los.GetField(bor+".FullName") + " shows less than 2 years residence history.  Cannot update status.");
      ev.Cancel = true;
    }
  }
  else
  {
    Offset ++;
    a --;
  }
}
}

function RunMacro71() { // CD01: Set Date Stamp when CD Redisclosure Required flagged
//Macro will set the date that the system detected that the CD Disclosure Test result changed to "5" CD Redisclosure Required
// The Date will be stored in the Extended Field: ExtendedFields.CD01CDRediscFlag
// When CD Redisclosure Test = "4" CD Redisclosure Not Required", the macro will reset the date trigger to null

if ((los.GetField("Status.CDDisclosureTestResult") == "5") /* CD Redisclosure Required */)
{
los.SetField("ExtendedFields.CD01CDRediscFlag", System.DateTime.Now)
{
if ((los.GetField("Status.CDDisclosureTestResult") == "4") /* CD Redisclosure Not Required */)
{
los.SetField("ExtendedFields.CD01CDRediscFlag", undefined)
}
}
}
}

function RunMacro72() { // CD01a: Set Date when CD Redisclsure Required
//Macro will set the date that the system detected that the CD Disclosure Test result changed to "5" CD Redisclosure Required
// The Date will be stored in the Extended Field: ExtendedFields.CD01CDRediscFlag
// When CD Redisclosure Test = "4" CD Redisclosure Not Required", the macro will reset the date trigger to null

if ((los.GetField("Status.CDDisclosureTestResult") == "5") /* CD Redisclosure Required */)
{
los.SetField("ExtendedFields.CD01CDRediscFlag", System.DateTime.Now)
{
if ((los.GetField("Status.CDDisclosureTestResult") == "4") /* CD Redisclosure Not Required */)
{
los.SetField("ExtendedFields.CD01CDRediscFlag", undefined)
}
}
}
}

function RunMacro73() { // CD02:  Calculate 3 busines days from CD Redisclosure Flag
//Calculate 3 business days from CD Redisclosure Flag set date

var FlagSetDate = los.GetField("ExtendedFields.CD01CDRediscFlag"); 
var result = los.Application.AddBusinessDays(FlagSetDate,3, true);
los.SetField("ExtendedFields.CD02ThreeBusDaysfromCDRediscFlag", result); 
}

function RunMacro74() { // CD02a:  Calculate 3 Business Days from CD Redisclosure Requred Flag
//Calculate 3 business days from CD Redisclosure Flag set date

var FlagSetDate = los.GetField("ExtendedFields.CD01CDRediscFlag"); 
var result = los.Application.AddBusinessDays(FlagSetDate,3, true);
los.SetField("ExtendedFields.CD02ThreeBusDaysfromCDRediscFlag", result); 
}

function RunMacro75() { // LE01 Add 3 Business days to Application Date
if (ev.TableAndFieldName == "Status.ApplicationDate") {
    var appDate = new Date(los.GetField("Status.ApplicationDate"));

    if (appDate != null) {

        var num = 3;
        var i = 1;
        while (num != 0) {
           
            appDate.setDate(appDate.getDate() + i);
            if (IsHoliday(appDate) == true || (appDate.getDay() == 0 || appDate.getDay() == 6)) { 
            num++;
            }
            num--;
        }   
var m = appDate.getMonth() + 1; 
var d = appDate.getDate(); 
var y = appDate.getFullYear(); 
        los.SetField("ExtendedFields.ApplicationDatePlus3BusinessDays", m+'/'+d+'/'+y)
    }
}
/***Function***/
function IsHoliday(dt_date) {
    // check simple dates (month/date - no leading zeroes)
    var d = new Date(dt_date);
    var n_date = d.getDate(),
        n_month = d.getMonth() + 1,
        n_day = d.getDay;
    var s_date1 = n_month + '/' + n_date;

    if (s_date1 == '1/1'   // New Year's Day
        || s_date1 == '6/14'  // Flag Day
        || s_date1 == '7/4'   // Independence Day
        || s_date1 == '11/11' // Veterans Day
        || s_date1 == '12/25' // Christmas Day
    ) return true;

    // weekday from beginning of the month (month/num/day)
    var n_wday = dt_date.getDay(),
        n_wnum = Math.floor((n_date - 1) / 7) + 1;
    var s_date2 = n_month + '/' + n_wnum + '/' + n_wday;

    if (s_date2 == '1/3/1'  // Birthday of Martin Luther King, third Monday in January
        || s_date2 == '2/3/1'  // Washington's Birthday, third Monday in February
        || s_date2 == '5/3/6'  // Armed Forces Day, third Saturday in May
        || s_date2 == '9/1/1'  // Labor Day, first Monday in September
        || s_date2 == '10/2/1' // Columbus Day, second Monday in October
        || s_date2 == '11/4/4' // Thanksgiving Day, fourth Thursday in November
    ) return true;
    // weekday number from end of the month (month/num/day)
    var dt_temp = new Date(dt_date);
    dt_temp.setDate(1);
    dt_temp.setMonth(dt_temp.getMonth() + 1);
    dt_temp.setDate(dt_temp.getDate() - 1);
    n_wnum = Math.floor((dt_temp.getDate() - n_date) / 7) + 1;
    var s_date3 = n_month + '/' + n_wnum + '/' + n_wday;

    if (s_date3 == '5/1/1'  // Memorial Day, last Monday in May
    ) return true;
    // misc complex dates
    if (s_date1 == '1/20' && (((dt_date.getFullYear() - 1937) % 4) == 0)
        // Inauguration Day, January 20th every four years, starting in 1937. 
    ) return true;

    if (n_month == 11 && n_date >= 2 && n_date < 9 && n_wday == 2
        // Election Day, Tuesday on or after November 2. 
    ) return true;

    if (n_day == 0 /*Sunday*/
    ) return true;

    return false;
}
/*End of function*/

}

function RunMacro76() { // LE01a: Add 3 Business days to Application Date
if (los.GetField("Status.ApplicationDate") != null) {
    var appDate = los.GetField("Status.ApplicationDate");

    los.SetField("ExtendedFields.ApplicationDatePlus3BusinessDays", los.Application.AddBusinessDays(appDate, 3, true));
}
}

function RunMacro77() { // LE02: Set LE Redisclosure Date based off TRID LE Light change
//Macro will set the date that the system detected that the LE Disclosure Test result changed to Le Redisclosure Required
// The Date will be stored in the Extended Field: ExtendedFields.DateRevisedLEFlagSet
// When LE Redisclosure Test = "5" Le Redisclosure Not Required", the macro will reset the date trigger to null

if ((los.GetField("Status.LEDisclosureTestResult") == "4") /* LE Redisclosure Required */)
{
los.SetField("ExtendedFields.DateRevisedLEFlagSet", System.DateTime.Now)
{
if ((los.GetField("Status.LEDisclosureTestResult") == "5") /* LE Redisclosure Not Required */)
{
los.SetField("ExtendedFields.DateRevisedLEFlagSet", undefined)
}
}
}
}

function RunMacro78() { // LE02a:  Set LE Redisclosure Date based off TRID LE Disc Test at Screen Changed
//Macro will set the date that the system detected that the LE Disclosure Test result changed to Le Redisclosure Required
// The Date will be stored in the Extended Field: ExtendedFields.DateRevisedLEFlagSet
// When LE Redisclosure Test = "5" Le Redisclosure Not Required", the macro will reset the date trigger to null

if ((los.GetField("Status.LEDisclosureTestResult") == "4") /* LE Redisclosure Required */)
{
los.SetField("ExtendedFields.DateRevisedLEFlagSet", System.DateTime.Now)
{
if ((los.GetField("Status.LEDisclosureTestResult") == "5") /* LE Redisclosure Not Required */)
{
los.SetField("ExtendedFields.DateRevisedLEFlagSet", undefined)
}
}
}
}

function RunMacro79() { // LE03:  Calculate 3 business days from LE Redisclosure Flag date
//Calculate 3 business days from LE Redisclosure Flag set date

var FlagSetDate = los.GetField("ExtendedFields.DateRevisedLEFlagSet"); 
var result = los.Application.AddBusinessDays(FlagSetDate,3, true);
los.SetField("ExtendedFields.ThreeBusDaysfromRedisclosureReqDt", result); 

}

function RunMacro80() { // LE03a:  Calculate 3 Business Dates from LE Redisclosure Test Result Date
//Calculate 3 business days from LE Redisclosure Flag set date

var FlagSetDate = los.GetField("ExtendedFields.DateRevisedLEFlagSet"); 
var result = los.Application.AddBusinessDays(FlagSetDate,3, true);
los.SetField("ExtendedFields.ThreeBusDaysfromRedisclosureReqDt", result); 
}

function RunMacro81() { // TRID01:  Set Assumability on CD--REVISED 10.1.18
var mtgType = false; 
switch(los.GetField("Loan.MortgageType"))
{
case 1: //VA
case 2: //FHA
case 4: //RHS
mtgType = true;
break; 
};

los.SetField("Loan.AssumptionOption", (mtgType == true || (los.GetField("Loan.MortgageType") == 3 && los.GetField("Loan.LoanProductType") == 1)) ? 2 : 1)


}

function RunMacro82() { // TRID02:  Set Liability in Foreclosure on CD page 1
var subPropState = los.GetField("SubProp.State");
var str = false; 
switch(subPropState){
case "AL":
case "CO":
case "DE":
case "DC":
case "IL":
case "IN":
case "KS":
case "KY":
case "MD":
case "MA":
case "MS":
case "MO":
case "NH":
case "OH":
case "RI":
case "VA":
case "WV":
case "WY":

str = true; 
break;
}

if (str == true){
 los.SetField("FileData.LiabilityAfterForeclosure",2); // State law does not protect you;
}
else los.SetField("FileData.LiabilityAfterForeclosure",1); // State law may protect you;


}

function RunMacro83() { // TRID03: Partial Payments
//At File Creation, set FileData.PartialPaymentOption on CD page 4 to 3-Not Accepted.
//may substitute in option 1-Applied to Loan or 2-Held in Separate Account if desired
//or provide logic as to when each value would be applied.

los.SetField("FileData.PartialPaymentOption", 3)
}

function RunMacro84() { // TRID04 REVISED: Set Escrow Waiver Reason on CD page 4
//Revised on 9.10.18

// if Lien status is 2nd or 3rd
//or if Mortgage Type = HELOC, Other, Second or Third
// set Escrow Waiver Reason to 2-Not Offered
//
//if Waive Escrow = 1-Waive Both
//set Escrow Waiver Reason to 1-Declined
//
// else set Escrow Waiver Reason  == null



var result = "";
if ((los.GetField("Loan.MortgageType") == "6" /*HELOC*/ ||
    los.GetField("Loan.MortgageType") == "5") /*Other*/ ||
    (los.GetField("Loan.LienPosition") == "2" /* Second */ ||
        los.GetField("Loan.LienPosition") == "3")) /* Third */
{
    result = 2; //NotOffered
}
else {
    if (los.GetField("FileData.WaiveEscrow") == "1") /* Waive Both */
    {
        result = 1; //Declined
    } 
}
los.SetField("FileData.EscrowAbsenceReason", result); 


}

function RunMacro85() { // TRID05: Set Late Charge
//Set the Late Charge to Standard wording as designated in Loan Program default 
// Or Client can use state specific Late Charge macro with 6 state specific custom wording 
//and default remainder states and product types to Standard wording 
// See State Specific Late Charge macro


if (ev.ScreenName== "Home")
{
los.SetField("Loan.LateChargeWording", 0)}
}

function RunMacro86() { // TRID05a: Late Charge by State (AL, KS, MS, NC, SC, WV)
var state = los.GetField("SubProp.State"); 
var mtgtype = los.GetField("Loan.MortgageType");


if (state ==  "AL"){
 los.SetField("Loan.LateChargeWording", 1 /*custom*/)
 if(mtgtype == 1) { // VA
los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment, but not more than U.S. $100.00"); 
}
 if (mtgtype == 2) { //FHA
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest, but not more than U.S. $100.00");
}
 if (mtgtype == 3 || mtgtype == 4) {  // Conv or RHS 
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 5.00% of my overdue payment of principal and interest, but not more than U.S. $100.00");
}
}
if (state ==  "KS"){
 los.SetField("Loan.LateChargeWording", 1 /*custom*/)
 if(mtgtype == 1) { // VA
los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment, but not more than U.S. $25.00"); 
}
 if (mtgtype == 2) { //FHA
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest, but not more than U.S. $25.00");
}
 if (mtgtype == 3 || mtgtype == 4) {  // Conv or RHS 
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 5.00% of my overdue payment of principal and interest, but not more than U.S. $25.00");
}
}
if (state ==  "WV"){
 los.SetField("Loan.LateChargeWording", 1 /*custom*/)
 if(mtgtype == 1) { // VA
los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment, but not more than U.S. $30.00"); 
}
 if (mtgtype == 2) { //FHA
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest, but not more than U.S. $30.00");
}
 if (mtgtype == 3 || mtgtype == 4) {  // Conv or RHS 
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 5.00% of my overdue payment of principal and interest, but not more than U.S. $30.00");
}
}
if (state == "MS" || state == "NC"){
 if (mtgtype == 1){ // VA 
    los.SetField("Loan.LateChargeWording", "0"); //Standard 
    los.SetField("Loan.LateChargePerc ", "4.00"); 
    los.SetField("Loan.LateChargeBasis","1");    //overdue payment
}
 if (mtgtype == 2 || mtgtype == 3 || mtgtype == 4) { // FHA or Conv  or RHS
    los.SetField("Loan.LateChargeWording","1");
    los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest");
 }
}
if (state ==  "SC"){
 los.SetField("Loan.LateChargeWording", 1 /*custom*/)
 if(mtgtype == 1) { // VA
los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment, but not less than U.S. $7.20 and not more than U.S. $18.00"); 
}
 if (mtgtype == 2) { //FHA
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest, but not less than U.S. $7.20 and not more than U.S. $18.00");
}
 if (mtgtype == 3 || mtgtype == 4) {  // Conv or RHS 
 los.SetField("Loan.LateChargeCustomDesc", "If your payment is more than 15 days late, the amount of the charge will be 5.00% of my overdue payment of principal and interest, but not less than U.S. $7.20 and not more than U.S. $18.00");
}
}
if (state != "AL", "KS", "MS", "NC", "SC", "WV")
{
los.SetField("Loan.LateChargeWording", 0)
}
}

function RunMacro87() { // TRID06:  Set Prepayment value
//When transitioning away from Home Screen
// Set Prepayment Penalty for CD page 1.  
// If Client has specific programs or loan types that do have a prepayment, consult with Implementations Mgr and we can insert into code
// Otherwise set Prepayment Penalty to "3- does not have a prepayment penalty". 



if (ev.ScreenName== "Home")
{
los.SetField("Loan.PrepaymentPenaltyOption", 3)
}
}

function RunMacro88() { // TRID07 Unreconciled Fee Increases
if (ev.ScreenName=="Loan Estimate Page 2") 
{
  if ((los.GetField("Status.FeeReconciliationTestResult") == "4") /* Unreconciled Fee Increases */)
  {
    los.Application.ShowMessageBox("Fees have changed.  Fees must be reconciled and changed circumstance must be completed.");
  }
};

}

function RunMacro89() { // TRID08: REVISED Disclosure Countdown - Business Days
/*Start*/

if (los.GetField("Status.ApplicationTestResult") == 1 && HasThisLoanBeenDisclosed() == false) {

        var appDate = los.GetField("Status.ApplicationDate");
        var today = System.DateTime.Today;

        var str = " day/s left to issue Initial LE."
        switch (true) {
            case (appDate == today):
                los.Application.ShowMessageBox("3" + str); break;
            case (los.Application.AddBusinessDays(appDate, 1, false) == today):
                los.Application.ShowMessageBox("2" + str); break;
            case (los.Application.AddBusinessDays(appDate, 2, false) == today):
                los.Application.ShowMessageBox("1" + str); break;
            case (los.Application.AddBusinessDays(appDate, 3, false) == today):
                los.Application.ShowMessageBox("LE must be disclosed by 5:00PM today"); break;
        }
    }
    function HasThisLoanBeenDisclosed() {
        for (var i = 1; i <= ev.File.GetCollectionCount("DiscLogEntry"); i++) {
            var obj: SDKObject = ev.File.GetCollectionObject("DiscLogEntry", i);
            if (obj.GetField("DeliveryDate") == null && obj.GetField("IssuedDate") == null)
            { return false; }
            return true;
        }
}
/*End*/

}

function RunMacro90() { // TRID09 QM Safe Harbor Fail will not allow Clear to Close
{
ev.NewStatusName == "Clear to Close"
{
if ((los.GetField("Loan.QMTestResult") == "4") /* Failed */)
{
ev.Cancel = true
}
}
}
}

function RunMacro91() { // TRID10: Set Interim Interest Days Per Year on Mortgage Type
//  Sets Interim Interest Days Per Year for non-government loans to 365.
//  Sets Interim Interest Days Per Year for government (FHA, VA, RHS) loans to 360
if(los.Session.SecurityProfile == "Admin")
{
if (los.GetField("Loan.GFEDelivered") == false)
{
  switch(los.GetField("Loan.MortgageType"))
  {
    case 1: // VA
    los.SetField("Loan.InterimIntDaysPerYearOV", 2); // 365
    break;
    case 2:  // FHA
    los.SetField("Loan.InterimIntDaysPerYearOV", 2); // 365
    break;
    case 3: // Conventional
    los.SetField("Loan.InterimIntDaysPerYearOV", 1); // 360
    break;
    case 4: // RHS
    los.SetField("Loan.InterimIntDaysPerYearOV", 2); // 360
    break;
    case 5: // Other
    los.SetField("Loan.InterimIntDaysPerYearOV", 1); // 360
    break;
    case 6: // HELOC
    los.SetField("Loan.InterimIntDaysPerYearOV", 1); // 360
    break;
    case 7: // State Agency
    los.SetField("Loan.InterimIntDaysPerYearOV", 1); // 360
    break;
    case 8: // Local Agency
    los.SetField("Loan.InterimIntDaysPerYearOV", 1); // 360
    break;
    default:
    los.SetField("Loan.InterimIntDaysPerYearOV", 0);
    break;
  }
}
};
}

function RunMacro92() { // TRID11: QM Failed, Cancel Docutech Interface Launch
if (ev.InterfaceName=="Docutech") 
{ if (los.GetField("Status.ApplicationDate") >= System.DateTime.Parse("01/10/2014"))
  {  if ((los.GetField("Loan.QMTestResult") == "4") /*Failed*/
        && (los.GetField("Loan.LoanProgramName").match("SPC*")))
     {  MessageBox.Show("This file failed the QM test and cannot be submitted to Docutech.");
        ev.Cancel=true;
     };    
  };
};

}

function RunMacro93() { // TRID12:  Intent to Proceed Macro
// If the Disclosure table is empty and the user attempts to enter an Intent to Proceed Date
// A message box will pop up and tell the user that the Intent to Proceed date cannot preceed the Initial LE Disclosure Date.


if (ev.TableAndFieldName == "Status.IntentToProceedDate"){
if (ev.NewValue != null && ev.File.GetCollectionCount("DiscLogEntry") == 0) {
MessageBox.Show("Your Intent to Proceed cannot be before your Inital LE disclosure date");
ev.Cancel = true; 
}
}


}

function RunMacro96() { // TRID14:  Cancel CD Order if last delivered LE date is Today
//If Interface = Docutech
// and order type == Closing Disclosure
// and last issued LE Delivery Date = today
// cancel order


if (ev.InterfaceName=="Docutech") {  // Replace "SomeValue" with a valid interface name, must be exact spelling and format
  if (ev.OrderType=="Closing") {  // Replace "SomeValue" with the type of service being ordered
    if (los.GetField("DiscLogEntryLEMostRecent.DeliveryDate") == System.DateTime.Today) {
los.Application.ShowMessageBox("Your CD order has been canceled.  The last LE was issued today and CD cannot be issued on same day.") //runs only in the Desktop App or SDK Stand-Alone App environments
ev.Cancel = true;
    };
  };
};

}

function RunMacro97() { // ULDD001::Set Originator Type
//  If Mortgage Type = Conv, Other or Heloc,
//  Then Set ULDD Origination Type - Transmittal.OriginatorType
//     if retail, then set to seller
//     if wholesale, then set to broker
//     if correspondent, then set to correspondent

if(ev.NewStatusName == "File Setup") // Enter the status to run this macro between double quotes
{
  if ((los.GetField("Loan.MortgageType") == "3") /* Conv */ 
    || (los.GetField("Loan.MortgageType") == "5") /* Other */ 
    || (los.GetField("Loan.MortgageType") == "6") /* Heloc */)
  {
    switch (los.GetField("FileData.OriginationChannel"))
    {
      case 1:
      los.SetField("Trans.OriginatorType", 2)/*Seller*/;
      break;
      case 3:
      los.SetField("Trans.OriginatorType", 3)/*Broker*/
      break;
      case 4:
      los.SetField("Trans.OriginatorType", 4)/*Correspondent*/
      break;
      default:
      break;
    }
  }
};

}

function RunMacro98() { // ULDD002::Set Lender for Retail/Wholesale loans
// Set Party - Lender when Origination channel is  Retail or Wholesale 

if (ev.NewStatusName == "Lead")// Enter the status to run this macro between double quotes
{
if (los.GetField("Lender.Company") == "")  
   { 
    if ((los.GetField("FileData.OriginationChannel") == "1")
       || (los.GetField("FileData.OriginationChannel")=="3")) 
       {
        los.SetField("Lender.Company", "Tomo Mortgage, LLC.");
        los.SetField("Lender.Street", "801 Barton Springs Road");
        los.SetField("Lender.City", "Fontana");
        los.SetField("Lender.State", "TX");
        los.SetField("Lender.Zip", "78704");
       }
   }
};
}

function RunMacro99() { // ULDD003::Set Attachment type for PUD's to "detached" unless selected otherwise.
if (ev.NewStatusName == "File Setup") 
// Enter the status to run this macro between double quotes
{
  if ((los.GetField("Secondary.AttachmentTypeOV") == "0"))

  {


    if ((los.GetField("SubProp.PropertyType") == "6") /* PUD */)


    {
      los.SetField("Secondary.AttachmentTypeOV", 2)
  
  }

  }

};
}

function RunMacro100() { // ULDD004::Set SpecialFloodHazardArea
//  When status changes to STATUS,
//  and Mortgage Type is Conv, Other or Heloc
//  If flood insurance is required, set SpecialFloodHazardArea  to True

if (ev.NewStatusName == "In Processing")// Enter the status to run this macro between double quotes
{  
  if ((los.GetField("Loan.MortgageType") == "3") /* Conv */ 
  || (los.GetField("Loan.MortgageType") == "5") /* Other */ 
  || (los.GetField("Loan.MortgageType") == "6") /* Heloc */)
  {
    if ((los.GetField("Party.FloodInsRequired") == "1") /* Yes */)
    {
      los.SetField("SubProp.SpecialFloodHazardArea", true)
    }    
  }
};
}

function RunMacro101() { // ULDD005::Set Non-Traditional Credit Used if no FICO values (up to 8 borrowers)
//  When status changes to STATUS,
//  and Mortgage Type is Conv, Other or Heloc
//  If all 3 credit scores are null or 0,
//  Set Non-Traditional Credit Used  to True (ev. borr # 1-8 only)

var BorrowerCount = ev.File.GetCollectionCount("Borrower");  

if (ev.NewStatusName == "File Setup")// Enter the status to run this macro between double quotes
{  
  if ((los.GetField("Loan.MortgageType") == "3") /* Conv */ 
  || (los.GetField("Loan.MortgageType") == "5") /* Other */ 
  || (los.GetField("Loan.MortgageType") == "6") /* Heloc */)
  {
     if ((los.GetField("Bor1.LastName") != "") 
        && ((los.GetField("Bor1.EquifaxScore") == null) || (los.GetField("Bor1.EquifaxScore") == 0))
        && ((los.GetField("Bor1.TransUnionScore")== null) || (los.GetField("Bor1.TransUnionScore") == 0))
        && ((los.GetField("Bor1.ExperianScore")== null) || (los.GetField("Bor1.ExperianScore") == 0)))
    {
      los.SetField("Bor1.NonTraditionalCreditUsed", true);
    }
    
    if (BorrowerCount > 1 
      && (los.GetField("Bor2.LastName") != "") 
      && ((los.GetField("Bor2.EquifaxScore") == null) ||   (los.GetField("Bor2.EquifaxScore") == 0))
      && ((los.GetField("Bor2.TransUnionScore")== null) || (los.GetField("Bor2.TransUnionScore") == 0))
      && ((los.GetField("Bor2.ExperianScore")== null) ||   (los.GetField("Bor2.ExperianScore") == 0)))
      {
        los.SetField("Bor2.NonTraditionalCreditUsed", true);
      }
      if (BorrowerCount > 2
        && (los.GetField("Bor3.LastName") != "") 
        && ((los.GetField("Bor3.EquifaxScore") == null) ||   (los.GetField("Bor3.EquifaxScore") == 0))
        && ((los.GetField("Bor3.TransUnionScore")== null) || (los.GetField("Bor3.TransUnionScore") == 0))
        && ((los.GetField("Bor3.ExperianScore")== null) ||   (los.GetField("Bor3.ExperianScore") == 0)))
      {
        los.SetField("Bor3.NonTraditionalCreditUsed", true);
      }
      if (BorrowerCount > 3
        && (los.GetField("Bor4.LastName") != "") 
        && ((los.GetField("Bor4.EquifaxScore") == null) ||   (los.GetField("Bor4.EquifaxScore") == 0))
        && ((los.GetField("Bor4.TransUnionScore")== null) || (los.GetField("Bor4.TransUnionScore") == 0))
        && ((los.GetField("Bor4.ExperianScore")== null) ||   (los.GetField("Bor4.ExperianScore") == 0)))
      {
        los.SetField("Bor4.NonTraditionalCreditUsed", true);
      }
      if (BorrowerCount > 4
        && (los.GetField("Bor5.LastName") != "") 
        && ((los.GetField("Bor5.EquifaxScore") == null) ||   (los.GetField("Bor5.EquifaxScore") == 0))
        && ((los.GetField("Bor5.TransUnionScore")== null) || (los.GetField("Bor5.TransUnionScore") == 0))
        && ((los.GetField("Bor5.ExperianScore")== null) ||   (los.GetField("Bor5.ExperianScore") == 0)))
      {
        los.SetField("Bor5.NonTraditionalCreditUsed", true);
      }
      if (BorrowerCount > 5
        && (los.GetField("Bor6.LastName") != "") 
        && ((los.GetField("Bor6.EquifaxScore") == null) ||   (los.GetField("Bor6.EquifaxScore") == 0))
        && ((los.GetField("Bor6.TransUnionScore")== null) || (los.GetField("Bor6.TransUnionScore") == 0))
        && ((los.GetField("Bor6.ExperianScore")== null) ||   (los.GetField("Bor6.ExperianScore") == 0)))
      {
        los.SetField("Bor6.NonTraditionalCreditUsed", true);
      }
      if (BorrowerCount > 6
        && (los.GetField("Bor7.LastName") != "") 
        && ((los.GetField("Bor7.EquifaxScore") == null) ||   (los.GetField("Bor7.EquifaxScore") == 0))
        && ((los.GetField("Bor7.TransUnionScore")== null) || (los.GetField("Bor7.TransUnionScore") == 0))
        && ((los.GetField("Bor7.ExperianScore")== null) ||   (los.GetField("Bor7.ExperianScore") == 0)))
      {
        los.SetField("Bor7.NonTraditionalCreditUsed", true);
      }
      if (BorrowerCount > 7
        && (los.GetField("Bor8.LastName") != "") 
        && ((los.GetField("Bor8.EquifaxScore") == null) ||   (los.GetField("Bor8.EquifaxScore") == 0))
        && ((los.GetField("Bor8.TransUnionScore")== null) || (los.GetField("Bor8.TransUnionScore") == 0))
        && ((los.GetField("Bor8.ExperianScore")== null) ||   (los.GetField("Bor8.ExperianScore") == 0)))
      {
        los.SetField("Bor8.NonTraditionalCreditUsed", true);
      }
  }
}
}

function RunMacro102() { // ULDD006::Set FirstTimeHomeBuyer and GSELoanProgramIdentifier
// When Status changes to STATUS1, STATUS2 or STATUS3
// and Mortgage Type is Conv, Other or Heloc
// and Loan Purpose is Purchase or Construction
// Default FirstTimeHomeBuyer on Home screen to NO
// Default FirstTimeHomeBuyer on each borrower to False
// Default GSELoanProgramIdentifier to blank if it is set as FirstTimeHomeBuyer, else leave as is
// If Ownership Interest (1003 p3) = 2,  
//    Set as FirstTimeHomeBuyer on the ULDD Borrower Screen.  (execute for all borrowers)
// If any borrower reflects Ownership Interest (1003 p3) = 2, 
//    Set the FirstTimeHomeBuyer on the Home screen to YES
//    Set GSELoanProgramIdentifier to First Time Home Borrower


if ((ev.NewStatusName == "Lead")      // Enter the status to run this macro between double quotes
     || (ev.NewStatusName == "File Setup")  // Enter the status to run this macro between double quotes

     || (ev.NewStatusName == "In Processing")) // Enter the status to run this macro between double quotes
{
  var firstTimeHB = 2 //no;
  var gseLoanProgramId  = 0;

  if  ((los.GetField("Loan.MortgageType") == "3") /* Conv */ 
  
    || (los.GetField("Loan.MortgageType") == "5") /* Other */ 
  
    || (los.GetField("Loan.MortgageType") == "6")) /* Heloc */
  {
    if ((los.GetField("Loan.LoanPurpose") == "1") /* Purchase */ 
      || (los.GetField("Loan.LoanPurpose") == "3") /* Construction */)
    {
      var Offset = 0;
      var file = ev.File;
      var borCount = file.GetCollectionCount("Borrower");
      for (var a = 1; a <= borCount; a++)
      {
        var bor = "Bor" + (a + Offset);
        if (file.DoesChildObjectExist(bor) == true)
        {
          var Borrower = file.GetCollectionObject("Borrower", a + Offset);
          if(Borrower.GetField("LastName") != "")
          {
            var borrower = "Bor" + a + Offset;
            var FirstTimeHomeBuyer = false;
            if(Borrower.GetField("OwnershipInterest") == 2) // No
            {
              firstTimeHB = 1;
              gseLoanProgramId = 1;
              FirstTimeHomeBuyer = true;
            }
            Borrower.SetField("FirstTimeHomebuyer", FirstTimeHomeBuyer);
          }
        }
        else
        {
          Offset ++;
          a --;
        }
      }  // borCount
      los.SetField("FileData.FirstTimeHomeBuyer", firstTimeHB);
      los.SetField("Secondary.GSELoanProgramIdentifier", gseLoanProgramId);
    }  // Loan.LoanPurpose
  };  // Loan.MortgageType 
}; // New Status Name
}

function RunMacro103() { // ULDD007::Default Buydown Contributor
// If Mortgage Type is Conv, Other or Heloc,
// Then Default Buydown Contributor if it is not assigned (0)
// if status is STATUS   
// and if "CC8XX.TotalAmount" > 0 (has buydown amount)
// and if BuydownContributor = 0
// Then execute...
// Default to 1 (borrower)
// -If if ccline 8XX buydown seller amt >0 then, (some is paid by lender or seller then reset)
//   --if closingcost.paidbyothertype = 0 (seller) then set to Interested Third Party (100)
//   --if closingcost.paidbyothertype = 1 (lender) then set to Lender (2)


if (ev.NewStatusName == ("File Setup"))// Enter the status to run this macro between double quotes
{
  if ((los.GetField("Loan.MortgageType") == "3") /* Conv */ 
    || (los.GetField("Loan.MortgageType") == "5") /* Other */ 
    || (los.GetField("Loan.MortgageType") == "6") /* Heloc */)
  {
      if ((los.GetField("CC8XX.TotalAmount") > 0)
         && ((los.GetField("Secondary.BuydownContributor") == "0")))
      {
          {los.SetField("Secondary.BuydownContributor", 0);} //default then override
          if (los.GetField("CC8XX.SellerAmount") > 0)
          {
              if ((los.GetField("CC8XX.PaidByOtherType") == "0") /* Seller */)
                 {los.SetField("Secondary.BuydownContributor", 100);}
              else {los.SetField("Secondary.BuydownContributor", 2);}
      }   
    }
  }
};

}

function RunMacro106() { // ULDD010::Set MI Absence Reason to #5 if no MI
if(ev.NewStatusName == "Approved")
  // Enter the status to run this macro between double quotes

{
  
  if (
(los.GetField("Loan.MIMethod") == "1") /* None */
   
   && (los.GetField("Loan.MortgageType") == "3") /* Conventional */
)


  {

    los.SetField("Secondary.MIAbsenceReason", 5)

  }


}
;

}

function RunMacro107() { // ULDD011::Set MI Company Type
switch(los.GetField("MICo.Company"))
{
  case "Arch":
  los.SetField("Party.MICompanyNameType", 1);
  break;
  case "Essent":  
  los.SetField("Party.MICompanyNameType", 2);
  break;
  case "Genworth": 
  los.SetField("Party.MICompanyNameType", 3);
  break;
  case"MGIC": 
  los.SetField("Party.MICompanyNameType", 4);
  break;
  case "PMI": 
  los.SetField("Party.MICompanyNameType", 6)
  break;
  case "Radian":
  los.SetField("Party.MICompanyNameType", 7);
  break;
  case"RMIC":
  los.SetField("Party.MICompanyNameType", 8);
  break;
  case "UGI":
  los.SetField("Party.MICompanyNameType", 10);
  break;
  default:
  los.SetField("Party.MICompanyNameType",0);
  break;
};
}

function RunMacro108() { // ULDD012::Set Second Mortgage Type (Concurrent/Resubordinated)
// Set Secondary Mortgage type if Status is STATUS
// If LTV >= CLTV and Secondary Mortgage type is 0, set  to None
// If CLTV >LTV and Subordinate Financing is yes, set to Concurrently Closing
// If CLTV >LTV and Suborindate Financing is no, set to Resubordinated
// Note:  CLTV is triggered by SubFiBaseLoan - so using that field to id CLTV
// Note:  Subordinate Financing is triggered by DOT.ExcludeSubFi

if (ev.NewStatusName == ("STATUS"))// Enter the status to run this macro between double quotes
{  
  if (los.GetField("Loan.SubFiBaseLoan") >0 ) // LTV <> CLTV
  {
    if (los.GetField("DOT.ExcludeSubFi") == true) 
    {
      los.SetField("Secondary.SecondMortgageType", 2)/* Resubordinated */;
    }
    else 
    {
      los.SetField("Secondary.SecondMortgageType", 1)/*Concurrently Closing*/;
    }
  }
  else // LTV = CLTV
  {
    los.SetField("Secondary.SecondMortgageType", 0)/*None*/;
  }
};

}

function RunMacro111() { // ULDD015::Set Investor remittance to Scheduled Interest/Scheduled Principal
// Set Secondary.InvestorRemittanceType to Scheduled Interest/Scheduled Principal
// when status is STATUS

if (ev.NewStatusName == ("Funded"))  // Enter the status to run this macro between double quotes
{
   los.SetField("Secondary.InvestorRemittanceType", 3);
};



}

function RunMacro121() { // ULDDSFC019::Lender-purchased mortgage insurance
//  If status changes to STATUS, and loan is Conv and MI indicator is Lender Paid

//  Set first available ULDD SFC code to 019


var SFC = "019"

var SFCDetermined = 0

var SFCNotExist = 0  

var SFCSlotAvail = 0


if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes


{


  if (


          ((los.GetField("Loan.MortgageType") == "3") /* Conventional */)


          && ((los.GetField("Loan.MIMethod") == "7") /* Lender Paid */)

   
       // && (


          //    (


          //      ((los.GetField("MI.PremiumPaidByOtherType") == "1") /* Lender */)

   
       //      &&((los.GetField("MI.PremiumPBSDesired") > 0)

          //        ||(los.GetField("Loan.MIPFFPaidInCashPBSDesired") > 0))

   
       //      )

   
       //    )


       )


 {
   SFCDetermined = 1;

   if ((los.GetField("Trans.SpecialFeatureCode01") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode02") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode03") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode04") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode05") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode06") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode07") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode08") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode09") != SFC)
 
  && (los.GetField("Trans.SpecialFeatureCode10") != SFC))

   {
 
    SFCNotExist = 1;

   }

 }

 if ((SFCDetermined == 1) && (SFCNotExist == 1))

 {

   if (los.GetField("Trans.SpecialFeatureCode01") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode01", SFC);
   }

   else if (los.GetField("Trans.SpecialFeatureCode02") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode02", SFC);

   }
 
  else if (los.GetField("Trans.SpecialFeatureCode03") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode03", SFC);

   }

   else if (los.GetField("Trans.SpecialFeatureCode04") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode04", SFC);

   }

   else if (los.GetField("Trans.SpecialFeatureCode05") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode05", SFC);

   }

   else if (los.GetField("Trans.SpecialFeatureCode06") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode06", SFC);

   }

   else if (los.GetField("Trans.SpecialFeatureCode07") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode07", SFC);

   }

   else if (los.GetField("Trans.SpecialFeatureCode08") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode08", SFC);

   }

   else if (los.GetField("Trans.SpecialFeatureCode09") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode09", SFC);

   }

   else if (los.GetField("Trans.SpecialFeatureCode10") == "")

   {
     SFCSlotAvail = 1;

     los.SetField("Trans.SpecialFeatureCode10", SFC);

   }

 }


 if ((SFCDetermined == 1) && (SFCNotExist == 0))

 {
 }

 if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))

 {
 }


}

;
}

function RunMacro123() { // ULDDSFC127::Desktop Underwriter Loan
//  If status changes to STATUS, and Conv and UW Method is DU 
//  Set first available ULDD SFC code to 127

var SFC = "127"
var SFCDetermined = 0
var SFCNotExist = 0  
var SFCSlotAvail = 0

if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes
{
  if (((los.GetField("Loan.MortgageType") == "3") /* Conventional */)
    && ((los.GetField("Trans.RiskAssessmentMethod") == "2") /* DU */))
  {
    SFCDetermined = 1;
    if ((los.GetField("Trans.SpecialFeatureCode01") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode02") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode03") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode04") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode05") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode06") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode07") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode08") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode09") != SFC) 
      && (los.GetField("Trans.SpecialFeatureCode10") != SFC))
    { 
       SFCNotExist = 1;
    }
  }
  if ((SFCDetermined == 1) && (SFCNotExist == 1))
  {
     if (los.GetField("Trans.SpecialFeatureCode01") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode01", SFC);
     }
     else if (los.GetField("Trans.SpecialFeatureCode02") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode02", SFC);
     } 
     else if (los.GetField("Trans.SpecialFeatureCode03") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode03", SFC);
     }
     else if (los.GetField("Trans.SpecialFeatureCode04") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode04", SFC);
     }
     else if (los.GetField("Trans.SpecialFeatureCode05") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode05", SFC);
     }
     else if (los.GetField("Trans.SpecialFeatureCode06") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode06", SFC);
     }
     else if (los.GetField("Trans.SpecialFeatureCode07") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode07", SFC);
     }
     else if (los.GetField("Trans.SpecialFeatureCode08") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode08", SFC);
     }
     else if (los.GetField("Trans.SpecialFeatureCode09") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode09", SFC);
     }
     else if (los.GetField("Trans.SpecialFeatureCode10") == "")
     {
       SFCSlotAvail = 1;
       los.SetField("Trans.SpecialFeatureCode10", SFC);
     }
   }

   if ((SFCDetermined == 1) && (SFCNotExist == 0))
   {
   } 
   if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))
   {
   }
};
}

function RunMacro125() { // ULDDSFC150::Multiple (5-10) Financed Properties to the Same Buyer
//  If status changes to STATUS,
//  and loan is Conv and has 5-10 Financed Properties
//  Set first available ULDD SFC code to 150

var SFC = "150"
var SFCDetermined = 0
var SFCNotExist = 0  
var SFCSlotAvail = 0

if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes
{
if ( ((los.GetField("Loan.MortgageType") == "3") /* Conventional */)
     && (los.GetField("Secondary.TotalMortgagedProperties") > 4) 
     && ((los.GetField("FileData.OccupancyType") == "2") /* Secondary Residence */ 
         || (los.GetField("FileData.OccupancyType") == "3") /* Investment Property */)
   )
       {  SFCDetermined = 1;
          if ((los.GetField("Trans.SpecialFeatureCode01") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode02") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode03") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode04") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode05") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode06") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode07") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode08") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode09") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode10") != SFC))
            { 
               SFCNotExist = 1;
            }
        }
        if ((SFCDetermined == 1) && (SFCNotExist == 1))
        {
           if (los.GetField("Trans.SpecialFeatureCode01") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode01", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode02") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode02", SFC)
           } 
           else if (los.GetField("Trans.SpecialFeatureCode03") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode03", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode04") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode04", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode05") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode05", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode06") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode06", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode07") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode07", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode08") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode08", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode09") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode09", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode10") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode10", SFC)
           }
        }

        if ((SFCDetermined == 1) && (SFCNotExist == 0))
            {}
        if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))
           {}
}
}

function RunMacro126() { // ULDDSFC168::Inter Vivos Revocable Trust
// If status changes to STATUS, and loan is Conv and Trust
// is Inter Vivos Trust, Set first available ULDD SFC code to 68

var SFC = "168"
var SFCDetermined = 0
var SFCNotExist = 0  
var SFCSlotAvail = 0

if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes
{
    if (((los.GetField("Loan.MortgageType") == "3") /* Conventional */)
       && ((los.GetField("Closing.TrustType") == "2") /* Inter Vivos Living Trust */)
       )
       {  SFCDetermined = 1;
          if ((los.GetField("Trans.SpecialFeatureCode01") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode02") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode03") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode04") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode05") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode06") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode07") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode08") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode09") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode10") != SFC))
            { 
               SFCNotExist = 1;
            }
        }
        if ((SFCDetermined == 1) && (SFCNotExist == 1))
        {
           if (los.GetField("Trans.SpecialFeatureCode01") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode01", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode02") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode02", SFC)
           } 
           else if (los.GetField("Trans.SpecialFeatureCode03") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode03", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode04") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode04", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode05") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode05", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode06") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode06", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode07") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode07", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode08") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode08", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode09") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode09", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode10") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode10", SFC)
           }
        }

        if ((SFCDetermined == 1) && (SFCNotExist == 0))
            {}
        if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))
           {}
}
  
}

function RunMacro127() { // ULDDSFC170::Flood Insurance Special Flood Hazard Area
//  If status changes to STATUS, and loan is Conv and in FloodZone
//  Set first available ULDD SFC code to 170

var SFC = "170"
var SFCDetermined = 0
var SFCNotExist = 0  
var SFCSlotAvail = 0

if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes
{
    if (((los.GetField("Loan.MortgageType") == "3") /* Conventional */)
       && (los.GetField("SubProp.SpecialFloodHazardArea") == true)
       )
       {  SFCDetermined = 1;
          if ((los.GetField("Trans.SpecialFeatureCode01") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode02") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode03") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode04") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode05") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode06") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode07") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode08") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode09") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode10") != SFC))
            { 
               SFCNotExist = 1;
            }
        }
        if ((SFCDetermined == 1) && (SFCNotExist == 1))
        {
           if (los.GetField("Trans.SpecialFeatureCode01") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode01", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode02") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode02", SFC)
           } 
           else if (los.GetField("Trans.SpecialFeatureCode03") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode03", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode04") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode04", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode05") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode05", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode06") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode06", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode07") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode07", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode08") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode08", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode09") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode09", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode10") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode10", SFC)
           }
        }

        if ((SFCDetermined == 1) && (SFCNotExist == 0))
            {}
        if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))
           {}
}
 
}

function RunMacro128() { // ULDDSFC175::Flood Insurance Not a Special Flood Hazard Area
// If status changes to STATUS, and loan is Conv and 
// Part of property in Flood Hazard Area, and Flood Att No not blank, and
// Flood Coverage Amt not blank
// Set first available ULDD SFC code to 175

var SFC = "175"
var SFCDetermined = 0
var SFCNotExist = 0  
var SFCSlotAvail = 0

if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes
{
    if (((los.GetField("Loan.MortgageType") == "3") /* Conventional */)
       && (los.GetField("SubProp.SpecialFloodHazardArea") == false)
       && (los.GetField("SubProp.PartialSFHA") == false)
       && ((los.GetField("Party.FloodAccountNo") != "")
          ||(los.GetField("Party.FloodCoverageAmount") != null))
       )
       {  SFCDetermined = 1;
          if ((los.GetField("Trans.SpecialFeatureCode01") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode02") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode03") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode04") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode05") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode06") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode07") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode08") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode09") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode10") != SFC))
            { 
               SFCNotExist = 1;
            }
        }
        if ((SFCDetermined == 1) && (SFCNotExist == 1))
        {
           if (los.GetField("Trans.SpecialFeatureCode01") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode01", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode02") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode02", SFC)
           } 
           else if (los.GetField("Trans.SpecialFeatureCode03") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode03", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode04") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode04", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode05") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode05", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode06") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode06", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode07") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode07", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode08") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode08", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode09") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode09", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode10") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode10", SFC)
           }
        }

        if ((SFCDetermined == 1) && (SFCNotExist == 0))
           {}
        if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))
           {}
}
 
}

function RunMacro129() { // ULDDSFC180::No Flood Insurance Not a Special Flood Hazard Area
//  If status changes to STATUS, and loan is Conv and not in FloodZone and there's no flood coverage amount or policy #
//  Set first available ULDD SFC code to 180

var SFC = "180"
var SFCDetermined = 0
var SFCNotExist = 0  
var SFCSlotAvail = 0

if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes
{
   if (((los.GetField("Loan.MortgageType") == "3") /* Conventional */)
       && (los.GetField("SubProp.SpecialFloodHazardArea") == false)
       && (los.GetField("Party.FloodAccountNo") == "")
       && ((los.GetField("Party.FloodCoverageAmount") == null)
         ||(los.GetField("Party.FloodCoverageAmount") == 0.00))
       )

       {  SFCDetermined = 1;
          if ((los.GetField("Trans.SpecialFeatureCode01") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode02") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode03") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode04") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode05") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode06") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode07") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode08") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode09") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode10") != SFC))
            { 
               SFCNotExist = 1;
            }
        }
        if ((SFCDetermined == 1) && (SFCNotExist == 1))
        {
           if (los.GetField("Trans.SpecialFeatureCode01") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode01", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode02") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode02", SFC)
           } 
           else if (los.GetField("Trans.SpecialFeatureCode03") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode03", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode04") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode04", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode05") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode05", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode06") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode06", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode07") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode07", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode08") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode08", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode09") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode09", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode10") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode10", SFC)
           }
        }

        if ((SFCDetermined == 1) && (SFCNotExist == 0))
            {}
        if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))
           {}
}



}

function RunMacro133() { // ULDDSFC281::Financed MI
//  If status changes to 'STATUS', and loan is Conv and the total loan amount is > base loan amount
//  Set first available ULDD SFC code to 281

var SFC = "281"
var SFCDetermined = 0
var SFCNotExist = 0  
var SFCSlotAvail = 0

if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes
{
    if (((los.GetField("Loan.MortgageType") == "3") /* Conventional */)
       && (los.GetField("Loan.LoanWith") > los.GetField("Loan.BaseLoan")))
       {  SFCDetermined = 1;
          if ((los.GetField("Trans.SpecialFeatureCode01") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode02") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode03") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode04") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode05") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode06") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode07") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode08") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode09") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode10") != SFC))
            { 
               SFCNotExist = 1;
            }
        }
        if ((SFCDetermined == 1) && (SFCNotExist == 1))
        {
           if (los.GetField("Trans.SpecialFeatureCode01") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode01", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode02") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode02", SFC)
           } 
           else if (los.GetField("Trans.SpecialFeatureCode03") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode03", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode04") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode04", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode05") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode05", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode06") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode06", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode07") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode07", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode08") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode08", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode09") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode09", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode10") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode10", SFC)
           }
        }

        if ((SFCDetermined == 1) && (SFCNotExist == 0))
            {}
        if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))
           {}
}

}

function RunMacro135() { // ULDDSFC588::Detached Condominium
//  If status changes to STATUS, and loan is Conv and is Detached Condo
//  Set first available ULDD SFC code to 588

var SFC = "588"
var SFCDetermined = 0
var SFCNotExist = 0  
var SFCSlotAvail = 0

if (ev.NewStatusName == "Funded") // Enter the status to run this macro between double quotes
{
    if (((los.GetField("Loan.MortgageType") == "3") /* Conventional */)
       && (los.GetField("SubProp.PropertyType") == "5") /* Detached Condo */)
       {  SFCDetermined = 1;
          if ((los.GetField("Trans.SpecialFeatureCode01") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode02") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode03") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode04") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode05") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode06") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode07") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode08") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode09") != SFC) 
            && (los.GetField("Trans.SpecialFeatureCode10") != SFC))
            { 
               SFCNotExist = 1;
            }
        }
        if ((SFCDetermined == 1) && (SFCNotExist == 1))
        {
           if (los.GetField("Trans.SpecialFeatureCode01") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode01", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode02") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode02", SFC)
           } 
           else if (los.GetField("Trans.SpecialFeatureCode03") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode03", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode04") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode04", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode05") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode05", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode06") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode06", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode07") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode07", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode08") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode08", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode09") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode09", SFC)
           }
           else if (los.GetField("Trans.SpecialFeatureCode10") == "")
           {  SFCSlotAvail = 1
              los.SetField("Trans.SpecialFeatureCode10", SFC)
           }
        }

        if ((SFCDetermined == 1) && (SFCNotExist == 0))
            {}
        if ((SFCDetermined == 1) && (SFCNotExist == 1) && (SFCSlotAvail == 0))
           {}
}

}

function RunMacro137() { // ULDDIFI001::Freddie IFI - Mortgage is sold with recourse
// ULDDIFI001
//
//  Sets one of the 10 Special Feature Codes to "001" if 
//  Extended Field FHMIF108 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI08")
  {
    if (los.GetField("ExtendedFields.FHMIFI08") == true) 
    {
      SFC("001");
    }
    else
    {
      SFCDel("001");
    }
  }
}
catch (err)
{
  los.Application.ShowMessageBox("Macro ULDDIFI001 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro138() { // ULDDIFI019::Freddie IFI - Mortgage with lender paid mortgage insurance
// ULDDIFI019
//
//  Sets one of the 10 Special Feature Codes to "019" if 
//  MI Method is set to Lender Paid.
//
//  MI Mithod on the screen 
//
try
{
  if (ev.TableAndFieldName=="Loan.MIMethod") 
  {
    if ((los.GetField("Loan.MIMethod") == "7") /* Lender Paid */)
    {
    SFC("019");
    }
    else
    {
      SFCDel("019");
    }
  }
}
catch (err)
{
  los.Application.ShowMessageBox("Macro ULDDIFI019 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro139() { // ULDDIFI033::Freddie IFI - Mortgage is sold with indemnification
// ULDDIFI033
//
//  Sets one of the 10 Special Feature Codes to "033" if 
//  Extended Field FHMIF109 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI09")
  {
    if (los.GetField("ExtendedFields.FHMIFI09") == true) 
    {
      SFC("033");
    }
    else
    {
      SFCDel("033");
    }
  }
}
catch (err)
{
  los.Application.ShowMessageBox("Macro ULDDIFI033 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro142() { // ULDDIFI532::Freddie IFI - Home Possible Mortgage satisfies the minimum number of payment references
// ULDDIFI532
//
//  Sets one of the 10 Special Feature Codes to "532" if 
//  Extended Field FHMIF106 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI06") 
  {
    if (los.GetField("ExtendedFields.FHMIFI06") == true) 
    {
      SFC("532");
    }
    else
    {
      SFCDel("532");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDIFI532 failed with the following error code:\r\n\r\n" + err);
};


function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro144() { // ULDDIFI630::Freddie IFI - Mortgage secured by properties with resale restrictions that terminate
// ULDDIFI630
//
//  Sets one of the 10 Special Feature Codes to "630" if 
//  Extended Field FHMIF112 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI12") 
  {
    if (los.GetField("ExtendedFields.FHMIFI12") == true) 
    {
      SFC("630");
    }
    else
    {
      SFCDel("630");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDIFI630 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro145() { // ULDDIFI631::Freddie IFI - Mortgage secured by properties with resale restrictions that survive forec
// ULDDIFI631
//
//  Sets one of the 10 Special Feature Codes to "631" if 
//  Extended Field FHMIF113 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI13") 
  {
    if (los.GetField("ExtendedFields.FHMIFI13") == true) 
    {
      SFC("631");
    }
    else
    {
      SFCDel("631");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDIFI631 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro146() { // ULDDIFI921::Freddie IFI - Mortgage where borrower used a credit card, cash advance or unsecured line
// ULDDIFI921
//
//  Sets one of the 10 Special Feature Codes to "921" if 
//  Extended Field FHMIF101 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI01")
  {
    if (los.GetField("ExtendedFields.FHMIFI01") == true) 
    {
      SFC("921");
    }
    else
    {
      SFCDel("921");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDIFI921 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}
}

function RunMacro147() { // ULDDIFID25::Freddie IFI - A mortgage using Employer Assisted Homeownership
// ULDDIFID25
//
//  Sets one of the 10 Special Feature Codes to "D25" if 
//  Extended Field FHMIF103 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI03") 
  {
    if (los.GetField("ExtendedFields.FHMIFI03") == true) 
    {
      SFC("D25");
    }
    else
    {
      SFCDel("D25");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDIFID25 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro149() { // ULDDIFIG18::Freddie IFI - HomePossible Mortgage with Affordable Second entered in LP in the "Total
// ULDDIFIG18
//
//  Sets one of the 10 Special Feature Codes to "G18" if 
//  Extended Field FHMIF105 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI05") 
  {
    if (los.GetField("ExtendedFields.FHMIFI05") == true) 
    {
      SFC("G18");
    }
    else
    {
      SFCDel("G18");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDIFIG18 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro150() { // ULDDIFIH03::Freddie IFI - Home Value Explorer (HVE) point value estimate used to determine value
// ULDDIFIH03
//
//  Sets one of the 10 Special Feature Codes to "H03" if 
//  Extended Field FHMIF110 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI10") 
  {
    if (los.GetField("ExtendedFields.FHMIFI10") == true) 
    {
      SFC("H03");
    }
    else
    {
      SFCDel("H03");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDIFIH03 failed with the following error code:\r\n\r\n" + err);
};

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro152() { // ULDDIFIH31::Freddie IFI - A mortgage when the borrower uses assets as a basis for mortgage qualifica
// ULDDIFIH31
//
//  Sets one of the 10 Special Feature Codes to "H31" if 
//  Extended Field FHMIF102 is set to true.
//
//  Extemded field by default is located on the custom screen 
//  "ULDD-FHLMC Investor Feature Identifier Fields"
//
try
{
  if (ev.TableAndFieldName=="ExtendedFields.FHMIFI02") 
  {
    if (los.GetField("ExtendedFields.FHMIFI02") == true) 
    {
      SFC("H31");
    }
    else
    {
      SFCDel("H31");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDIFIH31 failed with the following error code:\r\n\r\n" + err);
}

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro153() { // ULDDIFI241::Freddie IFI - Home Possible Mortgage
// ULDDFHLP241
//
//  Sets one of the 10 Special Feature Codes to "241" if 
//  Secondary Field GSELoanProgramIdentifier is set to 36.
//
//
try
{
  if (ev.TableAndFieldName=="Secondary.GSELoanProgramIdentifier") 
  {
    if (los.GetField("Secondary.GSELoanProgramIdentifier") == 36) 
    {
      SFC("241");
    }
    else
    {
      SFCDel("241");
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro ULDDFHLP241 failed with the following error code:\r\n\r\n" + err);
}

function SFC(sfc : String)
{
  if (los.GetField("Trans.SpecialFeatureCode01") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode01", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode02") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode02", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode03") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode03", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode04") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode04", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode05") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode05", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode06") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode06", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode07") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode07", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode08") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode08", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode09") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode09", sfc);
  }
  else
  if (los.GetField("Trans.SpecialFeatureCode10") == "") 
  {
    los.SetField("Trans.SpecialFeatureCode10", sfc);
  }
}

function SFCDel(sfc : String)
{
  var CodeFieldPrefix = "Trans.SpecialFeatureCode";
  var CodeField = CodeFieldPrefix;
  for (var a = 1; a <= 10; a++)
  {
    if(a<10)
    {
      CodeField = CodeField + "0" + a;
    }
    else
    {
      CodeField = CodeField + a;
    }
    if(los.GetField(CodeField) == sfc)
    {
      los.SetField(CodeField, null);
    }
    CodeField = CodeFieldPrefix;
  }
  CodeField = CodeFieldPrefix;
  var NextCodeField = CodeFieldPrefix;
  for(var a=1; a<=9; a++)
  {
    CodeField = CodeField + "0" + a;
    if(los.GetField(CodeField) == "")
    {
      if(a < 9)
      {
        NextCodeField = NextCodeField + "0" + (a+1);
      }
      else
      {
        NextCodeField = NextCodeField + (a+1);
      }
      los.SetField(CodeField, los.GetField(NextCodeField));
      los.SetField(NextCodeField, "");
    }
    CodeField = CodeFieldPrefix;
    NextCodeField = CodeFieldPrefix;
  }
}

}

function RunMacro154() { // UCD001: Set Assumption for CD
switch (los.GetField("Loan.MortgageType")) 
{
  case 1: //VA
  case 2: //FHA
  case 4: //RHS
    los.SetField("Loan.AssumptionOption", 2) /*May Assume*/ 
  break; 
  default: 
    los.SetField("Loan.AssumptionOption", 1) /*Cannot Assume*/ 
};

}

function RunMacro155() { // UCD002:  Set Liability After Foreclosure on CD page 4
var subPropState = los.GetField("SubProp.State");
var str = false; 
switch(subPropState){
case "AL":
case "CO":
case "DE":
case "DC":
case "IL":
case "IN":
case "KS":
case "KY":
case "MD":
case "MA":
case "MS":
case "MO":
case "NH":
case "OH":
case "RI":
case "VA":
case "WV":
case "WY":

str = true; 
break;
}

if (str == true){
los.SetField("FileData.LiabilityAfterForeclosure",2); // State law does not protect you;
}
else los.SetField("FileData.LiabilityAfterForeclosure",1); // State law may protect you;



}

function RunMacro156() { // UCD003: Partial Payments
//At File Creation, set FileData.PartialPaymentOption on CD page 4 to 3-Not Accepted.
//may substitute in option 1-Applied to Loan or 2-Held in Separate Account if desired
//or provide logic as to when each value would be applied.

los.SetField("FileData.PartialPaymentOption", 3)
}

function RunMacro157() { // UCD004: Set Escrow Waiver Reason on CD page 4
//if Waive Escrow = 1-Waive Both
//set Escrow Waiver Reason to 1-Declined
//
// if Lien status is 2nd or 3rd
//or if Mortgage Type = HELOC
// set Escrow Waiver Reason to 2-Not Offered

// set Escrow Waiver Reason to null

var  result = ""; 
if ((los.GetField("Loan.MortgageType") == "6") /*HELOC*/|| los.GetField("Loan.LienPosition") == 2 || 
los.GetField("Loan.LienPosition") == 3) {
              result  = 2; //NotOffered
}
if ((los.GetField("FileData.WaiveEscrow") == "1") /* Waive Both */){
             result = 1; //Declined
}
else if ((los.GetField("FileData.WaiveEscrow") != "1") /* Waive Both */){
              result = null; //Changed waive escrow reason
}
los.SetField("FileData.EscrowAbsenceReason", result) ;


}

function RunMacro158() { // UCD005: Set Late Payment
//Set the Late Charge to Standard wording as designated in Loan Program default 
// Or Client can use state specific Late Charge macro with 6 state specific custom wording 
//and default remainder states and product types to Standard wording 
// See State Specific Late Charge macro


if (ev.ScreenName== "Home")
{
los.SetField("Loan.LateChargeWording", 0)}
}

function RunMacro159() { // UCD006 Late Charge by State (AL, KS, MS, NC, SC, WV)
// Set State Specific Late Charge criteria for AL, KS, MS, NC, SC or WV, 
//Otherwise Set Late Charge Wording to Standard wording 
//(Best Practice is to set the Late Charge criteria within the Loan Programs within Byte) 
//and use macro to set State specific custom Late Charge wording by product




var state = los.GetField("SubProp.State"); 
var mtgtype = los.GetField("Loan.MortgageType");


if (state ==  "AL"){
 los.SetField("Loan.LateChargeWording", 1 /*custom*/)
 if(mtgtype == 1) { // VA
los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment, but not more than U.S. $100.00"); 
}
 if (mtgtype == 2) { //FHA
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest, but not more than U.S. $100.00");
}
 if (mtgtype == 3 || mtgtype == 4) {  // Conv or RHS 
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 5.00% of my overdue payment of principal and interest, but not more than U.S. $100.00");
}
}



if (state ==  "KS"){
 los.SetField("Loan.LateChargeWording", 1 /*custom*/)
 if(mtgtype == 1) { // VA
los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment, but not more than U.S. $25.00"); 
}
 if (mtgtype == 2) { //FHA
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest, but not more than U.S. $25.00");
}
 if (mtgtype == 3 || mtgtype == 4) {  // Conv or RHS 
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 5.00% of my overdue payment of principal and interest, but not more than U.S. $25.00");
}
}


if (state ==  "WV"){
 los.SetField("Loan.LateChargeWording", 1 /*custom*/)
 if(mtgtype == 1) { // VA
los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment, but not more than U.S. $30.00"); 
}
 if (mtgtype == 2) { //FHA
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest, but not more than U.S. $30.00");
}
 if (mtgtype == 3 || mtgtype == 4) {  // Conv or RHS 
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 5.00% of my overdue payment of principal and interest, but not more than U.S. $30.00");
}
}


if (state == "MS" || state == "NC"){
 if (mtgtype == 1){ // VA 
    los.SetField("Loan.LateChargeWording", "0"); //Standard 
    los.SetField("Loan.LateChargePerc ", "4.00"); 
    los.SetField("Loan.LateChargeBasis","1");    //overdue payment
}
 if (mtgtype == 2 || mtgtype == 3 || mtgtype == 4) { // FHA or Conv  or RHS
    los.SetField("Loan.LateChargeWording","1");
    los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest");
 }
}

if (state ==  "SC"){
 los.SetField("Loan.LateChargeWording", 1 /*custom*/)
 if(mtgtype == 1) { // VA
los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment, but not less than U.S. $7.20 and not more than U.S. $18.00"); 
}
 if (mtgtype == 2) { //FHA
 los.SetField("Loan.LateChargeCustomDesc","If your payment is more than 15 days late, the amount of the charge will be 4.00% of my overdue payment of principal and interest, but not less than U.S. $7.20 and not more than U.S. $18.00");
}
 if (mtgtype == 3 || mtgtype == 4) {  // Conv or RHS 
 los.SetField("Loan.LateChargeCustomDesc", "If your payment is more than 15 days late, the amount of the charge will be 5.00% of my overdue payment of principal and interest, but not less than U.S. $7.20 and not more than U.S. $18.00");
}
}

if (state != "AL", "KS", "MS", "NC", "SC", "WV")
{
los.SetField("Loan.LateChargeWording", 0)
}
}

function RunMacro160() { // UCD007:  Set Prepayment value
//When transitioning away from Home Screen
// Set Prepayment Penalty for CD page 1.  
// If Client has specific programs or loan types that do have a prepayment, consult with Implementations Mgr and we can insert into code
// Otherwise set Prepayment Penalty to "3- does not have a prepayment penalty". 



if (ev.ScreenName== "Home")
{
los.SetField("Loan.PrepaymentPenaltyOption", 3)
}
}

function RunMacro164() { // WFORIG002: Set Doc Type to Full for All Conv and FHA Loans
if (ev.TableAndFieldName=="Loan.MortgageType") 
{
  if (((los.GetField("Loan.MortgageType") == "1") /* VA */ ||
      (los.GetField("Loan.MortgageType") == "2") /* FHA */ ||
      (los.GetField("Loan.MortgageType") == "4") /* RHS */ &&
      (los.GetField("Loan.LoanPurpose") == "1") /* Purchase */) ||
      (los.GetField("Loan.MortgageType") == "3") /* Conventional */)
  {
    if ((los.GetField("FileData.DocumentationType") != "2") /* Full */)
    {
      los.SetField("FileData.DocumentationType", 2);
    }
  }
};

}

function RunMacro165() { // WFORIG003: Set Fee Simple if EstHeld is blank
if ((los.GetField("SubProp.EstHeld") == "0"))
{
  los.SetField("SubProp.EstHeld", 1);
}
}

function RunMacro166() { // WFORIG004-Residence history is less than 2 years
var Offset = 0;
var file = ev.File;
var borCount = file.GetCollectionCount("Borrower");

for (var a = 1; a <= borCount; a++)
{
  var bor = "Bor" + (a + Offset);
  if (file.DoesChildObjectExist(bor) == true)
  {
    var borrower = file.GetChildObject(bor);
    var FormerRes = borrower.GetCollectionCount("FormerResidence");
    var ResNoYears = bor + "Res.NoYears";
    var ResYear = los.GetField(ResNoYears);
    if (ResYear == undefined)
      ResYear = 0;
    var ResNoMonths = bor + "Res.NoMonths";
    var ResMonth = los.GetField(ResNoMonths);
    if (ResMonth == undefined)
      ResMonth = 0;
    for (var i = 1; i <= FormerRes; i++)
    {
      var OldRes = borrower.GetCollectionObject("FormerResidence", i);
      if(OldRes.GetField("NoYears") != undefined)
        ResYear = ResYear + OldRes.GetField("NoYears");
      if(OldRes.GetField("NoMonths") != undefined)
        ResMonth = ResMonth + OldRes.GetField("NoMonths");
    }
    ResYear = (ResYear * 12) + ResMonth;
    if (ResYear == 0)
    {
      MessageBox.Show(los.GetField(bor+".FullName") + " has no residence history.  Cannot update status.");
      ev.Cancel = true;
    }
    else
    if (ResYear < 24)
    {
      MessageBox.Show(los.GetField(bor+".FullName") + " shows less than 2 years residence history.  Cannot update status.");
      ev.Cancel = true;
    }
  }
  else
  {
    Offset ++;
    a --;
  }
}
}

function RunMacro167() { // WFLP001-Prevent Credit Pull Until Authorized
if (((ev.InterfaceName=="Docutech") ||
     (ev.InterfaceName=="1SourceData") ||
     (ev.InterfaceName=="Accudata") ||
     (ev.InterfaceName=="Accurate Financial") ||
     (ev.InterfaceName=="ACRAnet, Inc.") ||
     (ev.InterfaceName=="Advantage Credit Bureau") ||
     (ev.InterfaceName=="Advantage Credit Inc. of Colorado") ||
     (ev.InterfaceName=="Advantage Plus Credit Reporting Inc.") ||
     (ev.InterfaceName=="Alliance 2020") || 
     (ev.InterfaceName=="American Reporting Company - ML") ||
     (ev.InterfaceName=="Avantus") ||
     (ev.InterfaceName=="Birchwood Credit") ||
     (ev.InterfaceName=="CBA") ||
     (ev.InterfaceName=="CCIS Mortgage Services") ||
     (ev.InterfaceName=="Certified Credit Link") ||
     (ev.InterfaceName=="Certified Credit Reporting") ||
     (ev.InterfaceName=="CIC Mortgage Credit, Inc") ||
     (ev.InterfaceName=="CIS Information Services") ||
     (ev.InterfaceName=="CISCO Credit") ||
     (ev.InterfaceName=="Clear Choice Credit") ||
     (ev.InterfaceName=="CoreLogic Credco") ||
     (ev.InterfaceName=="Credit Bureau of San Luis Obispo") ||
     (ev.InterfaceName=="Credit Bureau Svcs - Ft Lauderdale FL") ||
     (ev.InterfaceName=="Credit Communications Inc (CCI)") ||
     (ev.InterfaceName=="Credit Data Corp.") ||
     (ev.InterfaceName=="Credit InfoNet") ||
     (ev.InterfaceName=="Credit Information Research") ||
     (ev.InterfaceName=="Credit Information Systems") ||
     (ev.InterfaceName=="Credit Link") ||
     (ev.InterfaceName=="Credit Masters") ||
     (ev.InterfaceName=="Credit Plus") ||
     (ev.InterfaceName=="Credit Service Company") ||
     (ev.InterfaceName=="Credit Technologies") ||
     (ev.InterfaceName=="CTI - Credit Technology") ||
     (ev.InterfaceName=="Data Facts, Inc.") ||
     (ev.InterfaceName=="DataQuick Lending Solutions") ||
     (ev.InterfaceName=="DCI Credit Services") ||
     (ev.InterfaceName=="EquiData") ||
     (ev.InterfaceName=="Equifax") ||
     (ev.InterfaceName=="Factual Data") ||
     (ev.InterfaceName=="First Meridian Credit Svs") ||
     (ev.InterfaceName=="Informative Research") ||
     (ev.InterfaceName=="KCB Information Services") ||
     (ev.InterfaceName=="MAF Mortgage Services") ||
     (ev.InterfaceName=="Merchants Credit Bureau") ||
     (ev.InterfaceName=="MFI Credit Solutions") ||
     (ev.InterfaceName=="Nationwide Commercial Services") ||
     (ev.InterfaceName=="NCCheck") ||
     (ev.InterfaceName=="NCO Credit Services") ||
     (ev.InterfaceName=="Network Credit Services") ||
     (ev.InterfaceName=="Old Republic Credit Svcs") ||
     (ev.InterfaceName=="Platinum Credit Services") ||
     (ev.InterfaceName=="Premium Credit Bureau") ||
     (ev.InterfaceName=="Prestige Credit Services") ||
     (ev.InterfaceName=="SARMA") ||
     (ev.InterfaceName=="Service 1st Info Systems") ||
     (ev.InterfaceName=="Settlement One") ||
     (ev.InterfaceName=="SettlementOne 281") ||
     (ev.InterfaceName=="SIR") ||
     (ev.InterfaceName=="United One Resources") ||
     (ev.InterfaceName=="Universal Credit Services, Inc.") ||
     (ev.InterfaceName=="WebStar"))
     &&
     (los.GetField("ActiveBor1.OKToPullCredit") == false))
{
  los.Application.ShowMessageBox("Ok to pull credit box must be checked prior to pulling credit.");
  ev.Cancel=true;
};

}

function RunMacro168() { // WFLP002-Set Submitted Date when Needed Item is assigned to Document
/*Sets the Submitted date when a document associated with a needed item is uploaded" */

var DocCount = ev.File.GetCollectionCount("EmbeddedDoc");
for (var a = 1; a <= DocCount; a++) {
    var Doc: SDKObject = ev.File.GetCollectionObject("EmbeddedDoc", a);
    var Ni = Doc.GetField("NeededItemID");
    if (Ni != null) {
        fire(Ni); 
    }
}



function fire(x) {

    for (var i = 1; i <= ev.File.GetCollectionCount("NeededItem"); i++) {
        var obj: SDKObject = ev.File.GetCollectionObject("NeededItem", i);
        var item = obj.GetField("NeededItemID");
       
        if (item == x) {
            obj.SetField("DateSubmitted", System.DateTime.Now);

        }
    };

};


}

function RunMacro171() { // WFUW001:  Set 1008 Contact Information
// Set 1008 Contact (Loan Seller) to the Underwriter Name, Title and Phone
// For Retail and Wholesale Origination Channel only

if ((los.GetField("FileData.OriginationChannel") == "0") 
    || (los.GetField("FileData.OriginationChannel") == "1") /* Retail */ 
    || (los.GetField("FileData.OriginationChannel") == "3") /* Wholesale */)
{  
    var UnderwriterFirstName = los.GetField("UW.FirstName")
    var UnderwriterLastName = los.GetField("UW.LastName")
    var UnderwriterWorkPhone = los.GetField("UW.WorkPhone")
    var UnderwriterTitle = los.GetField("UW.Title")
    los.SetField("LoanSel.FirstName",UnderwriterFirstName );
    los.SetField("LoanSel.LastName",UnderwriterLastName);
    los.SetField("LoanSel.WorkPhone",UnderwriterWorkPhone);
    los.SetField("LoanSel.Title",UnderwriterTitle);
}




}

function RunMacro172() { // WFUW002:  Copy RepCreditScore to 1008
ev.FieldName == los.GetField("FileData.FileCreditScore")
{
los.SetField("Trans.RepCreditScore", los.GetField("FileData.FileCreditScore"))
}
}

function RunMacro173() { // WFUW003:  Default Seller Loan Number on 1008
//  If Status is Submitted to Processing, then
//  copy  the lender case number to the 1008 seller loan number for retail and wholesale only


if (ev.NewStatusName == "Loan Setup")
{
    if ((los.GetField("Status.CreditOnlyDate") != null)  && (los.GetField("Loan.LenderCaseNo") != ""))
    {
        if ((los.GetField("FileData.OriginationChannel") == "1") /* Retail */ || (los.GetField("FileData.OriginationChannel") == "3") /* Wholesale */)
        {los.SetField("Trans.SellerLoanNo", "Loan.LenderCaseNo")}    
    }
}

}

function RunMacro174() { // WFUW004:  Set 1008 Mortgage Originator Type
//  Set 1008 Mortgage Originator Type
//  If Retail, then set to Seller (2)
//  If Wholesale, then set to Broker (3) 


if (los.GetField("FileData.OriginationChannel") == "1") /* Retail */ 
    {los.SetField("Trans.OriginatorType", 2);}

else if (los.GetField("FileData.OriginationChannel") == "3") /* Wholesale */
   {los.SetField("Trans.OriginatorType", 3);}

}

function RunMacro175() { // WFUW005:  Copy AUS Findings to 1008
//If Transmittal.RiskAssessmentMethod = 2-DU
//Then set Transmittal.AUSRecommendation = Fannie.Recommendation
//&& Set Transmittal.AUSFileID = Fannie.CaseFileID


//If Transmittal.RiskAssessmentMethod = 3-LP
//Then set the Transmittal.AUSRecommendation = Freddie.CreditRiskType
//&& set the Transmittal.AUSFileID = Freddie.LoanKeyNumber
//&& set the Transmittal.DocumentClass = Freddie.DocumentClassification

//If Transmittal.RiskAssessment = 11-GUS
//Then set the Transmittal.AUSRecommendation = Secondary.OtherAUSRecommendation
// && Set the Transmittal.AUSFileID = Secondary.OtherAUSCaseNo

//If Transmittal.RiskAssessmentMethod = 1-Manual
//Then set the Transmittal.AUSRecommendation = null
//&& set the Transmittal.AUSFileID = null
//&& set the Transmittal.DocumentClass = null


/*Start*/

switch(los.GetField("Trans.RiskAssessmentMethod")){
case 1: AUS(null, null, null); break; //manual
case 2: AUS(los.GetField("Fannie.Recommendation"),los.GetField("Fannie.CaseFileID"),null); // fannie 
break;
case 3: AUS(los.GetField("Freddie.CreditRiskType"),los.GetField("Freddie.LoanKeyNumber"),los.GetField("Freddie.DocumentClassification"));//freddie
break;
case 11: AUS(los.GetField("Secondary.OtherAUSRecommendation"), los.GetField("Secondary.OtherAUSCaseNo"),null); // RHS
}

function AUS(AusRec, FileID, DocClass)
{
    los.SetField("Trans.AUSRecommendation", AusRec);
    los.SetField("Trans.AUSFileID", FileID);
    los.SetField("Trans.DocumentClassification", DocClass);
}
/*End*/


}

function RunMacro176() { // WFUW007-  Underwriting Touch Counter_Revised
// then set UW_TouchCount = 1;
//
// If status is ever reset to "Submitted", the status change
// will NOT be counted.
//
// If New Status Name = "ReSubmitted" OR "TBD ReSubmitted" OR "Final Resubmit"
// and if UW_TouchCount = null or 0,
// then set UW_TouchCount = 1.
//
// Otherwise, if the New Status Name = "ReSubmitted" or "TBD ReSubmitted"
// increment UW_TouchCount by 1.

try 
{
    if ((ev.NewStatusName == "Submit to UW" || ev.NewStatusName == "ReSubmitted" || ev.NewStatusName == "TBD ReSumbitted" || ev.NewStatusName == "Submitted" || ev.NewStatusName == "ReSubmitted" || ev.NewStatusName == "Final Resubmit") &&
     (los.GetField("ExtendedFields.UW_TouchCount") == null ||
      los.GetField("ExtendedFields.UW_TouchCount") == 0))
  {
    los.SetField("ExtendedFields.UW_TouchCount", 1);
  }
  if((ev.NewStatusName=="ReSubmitted") ||
     (ev.NewStatusName=="TBD ReSubmitted"))
  {
    if((los.GetField("ExtendedFields.UW_TouchCount") == null) ||
       (los.GetField("ExtendedFields.UW_TouchCount") == 0))
    {
      los.SetField("ExtendedFields.UW_TouchCount", 1);
    }
    else
    {
      var Count = los.GetField("ExtendedFields.UW_TouchCount");
      Count++;
      los.SetField("ExtendedFields.UW_TouchCount", Count);
    }
  }
}
catch(err)
{
  los.Application.ShowMessageBox("Macro UW009a failed with error:\r\n\r\n" + err);
};
}

function RunMacro177() { // WFUW008- Prevent Clear To Close if Documents not reviewed
// Prevents the loan from moving to Clear to Close status when there are stored documents
// with a status of "Not Reviewed"
//
// if(los.Session.SecurityProfile=="Admin")
{
if(ev.NewStatusName=="Clear To Close")
{
  var DocCount = ev.File.GetCollectionCount("EmbeddedDoc");
  for (var a = 1; a <= DocCount; a++)
  {
    var Doc : SDKObject = ev.File.GetCollectionObject("EmbeddedDoc",DocCount);
    var DocStatus = Doc.GetField("Status");
    var DocCategory = Doc.GetField("DocumentCategoryCode");  // Document Category - to be used in future macros
    if (DocStatus==0)
    {
      los.Application.ShowMessageBox("There are documents that have not been reviewed.  Cannot set status to Clear To Close at thsi time.");
      a = DocCount + 1;
      ev.Cancel=true;
    }
  }
}
};
}

function RunMacro179() { // WFUW010-LQI Clear must have all findings Acceptable or Acceptable as Cured
if (ev.TableAndFieldName=="ExtendedFields.LQI_ClearedDate") 
{
  if (((los.GetField("ExtendedFields.LQI_Appraisal_Status") != "Acceptable") &&
       (los.GetField("ExtendedFields.LQI_Appraisal_Status") != "Acceptable as Cured")) ||
       ((los.GetField("ExtendedFields.LQI_Income_Status") != "Acceptable") &&
        (los.GetField("ExtendedFields.LQI_Income_Status") != "Acceptable as Cured")) ||
       ((los.GetField("ExtendedFields.LQI_Credit_Status") != "Acceptable") &&
        (los.GetField("ExtendedFields.LQI_Credit_Status") != "Acceptable as Cured")) ||
       ((los.GetField("ExtendedFields.LQI_Debt_Ratio_Status") != "Acceptable") &&
        (los.GetField("ExtendedFields.LQI_Debt_Ratio_Status") != "Acceptable as Cured")) ||
       ((los.GetField("ExtendedFields.LQI_Assets_Cash_to_Close") != "Acceptable") &&
        (los.GetField("ExtendedFields.LQI_Assets_Cash_to_Close") != "Acceptable as Cured")) ||
       ((los.GetField("ExtendedFields.LQI_Compliance_Doc_Review_Status") != "Acceptable") &&
        (los.GetField("ExtendedFields.LQI_Compliance_Doc_Review_Status") != "Acceptable as Cured")))
{
  los.Application.ShowMessageBox("All audit sub-sections must have an Acceptable or Acceptable as cured status prior to entering the LQI Cleared Date.");
  ev.Cancel=true;
}
};

}

function RunMacro185() { // WFUW016-Preserve Approval Date
try {
    var OldStatus = ev.OldStatusName.toString();
    var NewStatus = ev.NewStatusName.toString();
    var ApprovedStatusDate = los.GetField("Status.ApprovedDate");
    var OriginalApprovedDate = los.GetField("ExtendedFields.OriginalApprovedDate");

if (OldStatus == "UW Received" && NewStatus == "Approved") 
{
 if (OriginalApprovedDate == null) 
{
         los.SetField("ExtendedFields.OriginalApprovedDate", ApprovedStatusDate);
}
else {
     los.SetField("Status.ApprovedDate", OriginalApprovedDate);
 }
};
}
catch(err)
{  los.Application.ShowMessageBox("Error : " + err);
}
}

function RunMacro187() { // WFDOCS001: Cannot move to Docs Sent if CD not disclosed
try
{
  if(ev.NewStatusName=="Docs Sent")
  {
    if (los.GetField("DiscLogEntryCDInitial.DeliveryDate") == null)
    {
      los.Application.ShowMessageBox("Status cannot be moved to Docs Sent until CD has been disclosed.");
      ev.Cancel=true;
    }
  }
}
catch(err)
{
  MessageBox.Show("Macro Closing Docs WF Cannot move to Docs Sent if CD not disclosed generated error:\r\n\r\n" + err);
}
}

function RunMacro188() { // WFDOCS002::Set CD Liability after Foreclosure Field
// When Status is changed to Clear to Close,
// set "Liability after Foreclosure' (on CD) to
// "State Law May Protect You"

if (ev.NewStatusName == ("Clear To Close")) // Enter the status to run this macro between double quotes
{
  los.SetField("FileData.LiabilityAfterForeclosure", 1) //*State Law May Protect You//
}


}

function RunMacro189() { // WFDOCS003::Set CD Partial Payments Field
//  When Status is changed to Clear to Close,
//  set "Partial Payments" field (on CD) to
//  "Not Accepted"

if (ev.NewStatusName == ("Clear To Close")) // Enter the status to run this macro between double quotes
{
  los.SetField("FileData.PartialPaymentOption", 3) //*Not Accepted//
}
}

function RunMacro190() { // WFDOCS004::Document Expiration, cancel doc prep interface
var Count = ev.File.GetCollectionCount("EmbeddedDoc");
for (var a = 1; a <= Count; a++)
{
   var obj : SDKObject = ev.File.GetCollectionObject("EmbeddedDoc", a);
  var ExpDate = new Date(obj.GetField("ExpirationDate"));
  var Status = obj.GetField("Docs Drawn");
  var Today = new Date();
  if(Status ==1 && ExpDate <= Today)
  {
    MessageBox.Show("There is a document expired in document storage.  You will be unable to launch the document preparation interface until the expiration date is extended.");
    ev.Cancel=true;
  }
};

}

function RunMacro193() { // Net Buy - Set Discount
// Set the values of Discount Points Charged field. 

if ((los.GetField("FileData.OriginationChannel") == "1") /* Retail */ || (los.GetField("FileData.OriginationChannel") == "3") /* Wholesale */){
//Do something


  if ((los.GetField("Loan.BuyPriceNet") != null) && 
      (los.GetField("Loan.BuyPriceNet") < 100))
  {
  //Do something
  los.SetField("CC802.Points", 100-los.GetField("Loan.BuyPriceNet")) //Sets the discount points
  }
  if (los.GetField("Loan.BuyPriceNet") >= 100){
  //Do something
  los.SetField("CC802.Points", null)
  }
}
}

function RunMacro194() { // Set Fee Expriation Date
if ((ev.TableAndFieldName=="Loan.GFEDelivered") &&
    (los.GetField("Loan.GFEDelivered") == true))
{
  if(los.GetField("Status.ClosingCostsExpirationDate") == undefined)
  {
    for (var a = 1; a <= ev.File.GetCollectionCount("DiscLogEntry"); a++)
    {

      var InitialLEDate = new Date();
      var FeeExpirationdate = dueDate(10, InitialLEDate);
      los.SetField("Status.ClosingCostsExpirationDate", FeeExpirationdate);
      los.SetField("Status.ClosingCostsExpirationTimeOfDayOV", "5:00 pm CT");
      a = ev.File.GetCollectionCount("DiscLogEntry") + 1;
    }
  }
};

function dueDate(numDays : int, initialDate)
{
var today = new Date(initialDate);

// Calculate Martin Luther King Day date

var dt = new Date();
dt.setMonth(0);// set to January
dt.setDate(1);
// Find first Monday
while (dt.getDay() != 1)
{
 dt.setDate(dt.getDate() + 1);
}
// Add 2 weeks to find 3rd Monday of January
dt.setDate(dt.getDate() + 14);
var dtMonth = dt.getMonth() + 1;
var dtDay = dt.getDate();
var dtYear = dt.getFullYear();
if (dt < today)
  dtYear += 1;
var mlk = (dtMonth + '/' + dtDay +'/' + dtYear);

// Calculate President's Day date
dt = new Date();
dt.setMonth(1);
dt.setDate(1);
// Find first Monday
while (dt.getDay() != 1)
{
 dt.setDate(dt.getDate() + 1);
}
// Add 2 weeks
dt.setDate(dt.getDate() + 14);
dtMonth = dt.getMonth() + 1;
dtDay = dt.getDate();
dtYear = dt.getFullYear();
if (dt < today)
  dtYear += 1;
var presidentsDay = (dtMonth + '/' + dtDay +'/' + dtYear);

// Calculate Memorial Day date
dt = new Date();
dt.setMonth(4);
dt.setDate(31);
// Find last Monday
while (dt.getDay() != 1)
{
 dt.setDate(dt.getDate()-1);
}
dtMonth = dt.getMonth() + 1;
dtDay = dt.getDate();
dtYear = dt.getFullYear();
if (dt < today)
  dtYear += 1;
var memorialDay = (dtMonth + '/' + dtDay + '/' + dtYear);

// Calculate July 4
// if July 4 falls on a Sunday, display following Monday for holiday date
dt = new Date();
dt.setMonth(6);
dt.setDate(4);
dtYear = dt.getYear();
//if (dt < today)
//  dtYear += 1;
var july04 = new Date("7/4/" + dtYear);
var july04dow = july04.getDay();
july04 = "7/4/" + dtYear;
if (july04dow == 0)
  july04 = ("7/5/" + dtYear);
if(july04dow == 6)
  july04 = ("7/3/" + dtYear);

// Calculate Labor Day date
dt = new Date();
dt.setMonth(8); // September
dt.setDate(1);
//Find first Monday
while (dt.getDay() != 1)
{
  dt.setDate(dt.getDate() + 1);
}
dtMonth = dt.getMonth() + 1;
dtDay = dt.getDate();
dtYear = dt.getFullYear();
if (dt < today)
  dtYear += 1;
var LaborDay = (dtMonth + '/' + dtDay + '/' + dtYear);

// Calculate Columbus Day date
dt = new Date();
dt.setMonth(9);
dt.setDate(1);
// Find first Monday
while (dt.getDay() != 1)
{
  dt.setDate(dt.getDate() + 1);
}
// Add 1 week
dt.setDate(dt.getDate() + 7);
dtMonth = dt.getMonth() + 1;
dtDay = dt.getDate();
dtYear = dt.getFullYear();
if (dt < today)
  dtYear += 1;
var ColumbusDay = (dtMonth + '/' + dtDay + '/' + dtYear);

// Calculate Veterans Day date
// If Nov 11 falls on Saturday, take the previous Friday as holiday
// If Nov 11 falls on a Sunday, take the following Monday as holiday

dt = new Date();
dt.setMonth(10);
dt.setDate(11);
dtYear = dt.getYear();
if (dt < today)
  dtYear += 1;
var nov11 = ("11/11/" + dtYear);
var nov11dow = dt.getDay();
if (nov11dow == 0)
  nov11 = new Date("11/12/" + dtYear);
nov11 = (nov11);

// Calculate Thanksgiving
dt = new Date();
dt.setMonth(10); // November
dt.setDate(1);
// Find first Thursday
while (dt.getDay() != 4)
{
  dt.setDate(dt.getDate() + 1);
}
dt.setDate(dt.getDate() + 21);
dtMonth = dt.getMonth() + 1;
dtDay = dt.getDate();
dtYear = dt.getFullYear();
if (dt < today)
  dtYear += 1;
var Thanksgiving = (dtMonth + '/' + dtDay + '/' + dtYear);

// Calculater Christmas Day holiday
// if Dec 25 falls on a Saturday, holiday is Friday before.
// If Dec 25 falls on a Sunday, holiday is Monday afterwards.

dt = new Date();
dtYear = dt.getYear();
dt.setMonth(11);
dt.setDate(25);
if (dt < today)
  dtYear += 1;
var dec25 = new Date("12/25/" + dtYear);
var dec25dow = dec25.getDay();
dec25 = ("12/25/" + dtYear);
if (dec25dow == 0)
  dec25 = ("12/26" + dtYear);

// Calculate New Year's Day
// if Jan 1 falls on Saturday, holiday is previous Friday
// if Jan 1 falls on Sunday, holiday is following Monday
dt = new Date();
var dtYear = dt.getYear() + 1;
var jan01 = new Date ("1/1/" + dtYear);
var jan01dow = jan01.getDay();
jan01 = "1/1/" + dtYear;
if (jan01dow == 0)
  jan01 = ("1/2/" + dtYear);




dt = new Date(initialDate);
var dtdow = dt.getDay();
dtMonth = dt.getMonth() +1;
dtDay = dt.getDate();
dtYear = dt.getFullYear();
dt = dtMonth + "/" + dtDay + "/" + dtYear;
var minDays : int = numDays;
var Result = new Date(dt);
while (minDays > 0)
{
Result = new Date(Result);
Result.setDate(Result.getDate() + 1);
if (Result.getDay() != 6)  // Saturday
 {
   if (Result.getDay() != 0)  // Sunday
{
dtMonth = Result.getMonth() +1;
dtDay = Result.getDate();
dtYear = Result.getYear();
Result = dtMonth + "/" + dtDay + "/" + dtYear;
   switch (Result)
{
 case (mlk):
  break;
 case (presidentsDay):
  break;
 case (memorialDay):
   break;
 case (july04):
   break;
 case (LaborDay):
   break;
 case (ColumbusDay):
   break;
 case (nov11):
   break;
 case (Thanksgiving):
   break;
 case (dec25):
   break;
 case (jan01):
   break;
default:
  minDays-=1;
  break;
}
}
 }
}

return Result;
}

}

function RunMacro195() { // Application Date Set
//Application Test Result Constants
var HasSixDataPointsAndAppDateNotSet = 2;

//Get Condition Variables
var ApplicationTestResult = los.GetField("Status.ApplicationTestResult");

//Check Condition
if(ApplicationTestResult == HasSixDataPointsAndAppDateNotSet)
{
    los.SetField("Status.ApplicationDate", DateTime.Now);

}
}

function RunMacro196() { // Set LO Comp Value
if ((los.GetField("FileData.LOCompType") == "0")){
los.SetField("FileData.LOCompType", 2)
}
}

function RunMacro197() { // 56- Create 3 Conditions on File Creation
if(los.Session.SecurityProfile == "Admin")
{
var ConditionClass = "TRAIL";
var ConditionType = "PROP";
var ConditionNo = 9000;
var DescType = 1;
var Description = "Final Title Policy";
var DefaultStage = 16;
var Standard = 1;
var Responsibility = 612; // Collateral Control
var Internal = true;
if(DoesConditionExist(Description) == false)
  AddCondition(ConditionClass, ConditionType, ConditionNo, DescType,
                Description, DefaultStage, Standard, Responsibility,
                Internal);

ConditionType = "PROP";
ConditionNo = 9001;
Description = "Recorded Mortgage";
Responsibility = 612; // Collateral Control

if(DoesConditionExist(Description) == false)
  AddCondition(ConditionClass, ConditionType, ConditionNo, DescType,
                Description, DefaultStage, Standard, Responsibility,
                Internal);
};


function DoesConditionExist(desc : String) : boolean
{
  for (var i = 1; i <= ev.File.GetCollectionCount("Condition"); i++)
  {
    var obj: SDKObject = ev.File.GetCollectionObject("Condition", i);
    if (obj.GetField("DescriptionTemplate") == desc)
      return true;
  }
  return false;
}

function AddCondition(condclass : String, type : String, no : int, descType : int, desc : String, defStage : int, standard : int,
                       resp : int, isInternal : boolean)
{
  var index : int = ev.File.AddCollectionObject("Condition");
  if (index > 0)
  {
    var obj : SDKObject = ev.File.GetCollectionObject("Condition", index);
    if (obj != null)
    {
      obj.SetField("ConditionClassCode", condclass);
      obj.SetField("ConditionTypeCode", type);
      obj.SetField("ConditionNo", no);
      obj.SetField("ConditionDescriptionType", descType);
      obj.SetField("DescriptionTemplate",desc);
      obj.SetField("ConditionStage", defStage);
      obj.SetField("ResponsibleParty", resp);
      obj.SetField("IsInternal", isInternal);
    }
  }
}
}

function RunMacro202() { // PTD Conditions
if(ev.NewStatusName == "Clear to Close")
{
  var PTDConditionsCleared = true;
  var ConditionCount = ev.File.GetCollectionCount("Condition");
  for (var a = 1; a <= ConditionCount; a++)
  {
    var obj : SDKObject = ev.File.GetCollectionObject("Condition", a);
    if((obj.GetField("ConditionStage") == 2) &&
       ((obj.GetField("ClearedBy") == "")||
       (obj.GetField("ClearedBy") == null)))
    {
      PTDConditionsCleared = false;
      a = ConditionCount+1;
    }
    if(PTDConditionsCleared == false)
    {
      los.Application.ShowMessageBox("PTD Conditions not cleared.  Cannot move status to Clear To Close at this time.");
      ev.Cancel=true;
    }
  }
}

if(ev.NewStatusName == "Clear To Close")
{
  var PTFConditionsCleared = true;
  var ConditionCount = ev.File.GetCollectionCount("Condition");
  for (var a = 1; a <= ConditionCount; a++)
  {
    obj = ev.File.GetCollectionObject("Condition", a);
    if((obj.GetField("ConditionStage") == 1) &&
       ((obj.GetField("ClearedBy") == "")||
       (obj.GetField("ClearedBy") == null)))
    {
      PTDConditionsCleared = false;
      a = ConditionCount+1;
    }
    if(PTFConditionsCleared == false)
    {
      los.Application.ShowMessageBox("PTD Conditions not cleared.  Cannot move status to Clear To Close at this time.");
      ev.Cancel=true;
    }
  }
}
}

function RunMacro203() { // PTF Conditions
if(ev.NewStatusName == "Funded")
{
  var PTFConditionsCleared = true;
  var ConditionCount = ev.File.GetCollectionCount("Condition");
  for (var a = 1; a <= ConditionCount; a++)
  {
    var obj : SDKObject = ev.File.GetCollectionObject("Condition", a);
    if((obj.GetField("ConditionStage") == 2) &&
       ((obj.GetField("ClearedBy") == "")||
       (obj.GetField("ClearedBy") == null)))
    {
      PTFConditionsCleared = false;
      a = ConditionCount+1;
    }
    if(PTFConditionsCleared == false)
    {
      los.Application.ShowMessageBox("PTF Conditions not cleared.  Cannot move status to Funded at this time.");
      ev.Cancel=true;
    }
  }
}

if(ev.NewStatusName == "Funded")
{
  var PTFConditionsCleared = true;
  var ConditionCount = ev.File.GetCollectionCount("Condition");
  for (var a = 1; a <= ConditionCount; a++)
  {
    obj = ev.File.GetCollectionObject("Condition", a);
    if((obj.GetField("ConditionStage") == 1) &&
       ((obj.GetField("ClearedBy") == "")||
       (obj.GetField("ClearedBy") == null)))
    {
      PTFConditionsCleared = false;
      a = ConditionCount+1;
    }
    if(PTFConditionsCleared == false)
    {
      los.Application.ShowMessageBox("PTF Conditions not cleared.  Cannot move status to Funded at this time.");
      ev.Cancel=true;
    }
  }
}
}

function RunMacro204() { // LockDeskUser
if (los.GetField("ExtendedFields.PM_Decision") != null && los.GetField("ExtendedFields.PM_Decision") !== "") {
  los.SetField("ExtendedFields.PM_LockDesk", los.Session.UserName);
}else{
 los.SetField("ExtendedFields.PM_LockDesk", "");
}
}

}

